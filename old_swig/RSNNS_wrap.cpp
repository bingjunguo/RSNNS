/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.1
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGR


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif


/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.
  
  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/* 
   Flags/methods for returning states.
   
   The SWIG conversion methods, as ConvertPtr, return an integer 
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).
   
   Use the following macros/flags to set or process the returning
   states.
   
   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }
    
   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {         
        if (<obj is ok>) {			       
          if (<need new object>) {		       
            *ptr = <ptr to new allocated object>; 
            return SWIG_NEWOBJ;		       
          } else {				       
            *ptr = <ptr to old object>;	       
            return SWIG_OLDOBJ;		       
          } 				       
        } else {				       
          return SWIG_BADOBJ;		       
        }					       
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call
 
      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0) 
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)  

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) { 
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) { 
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0; 
}
#else /* no cast-rank mode */
#  define SWIG_AddCast
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/* 
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCompare(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}


/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/* 
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/* 
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/* 
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;
  
  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }    
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}
  
/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start, 
                            swig_module_info *end, 
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      register size_t l = 0;
      register size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	register size_t i = (l + r) >> 1; 
	const char *iname = iter->types[i]->name;
	if (iname) {
	  register int compare = strcmp(name, iname);
	  if (compare == 0) {	    
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start, 
                     swig_module_info *end, 
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      register size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }
  
  /* neither found a match */
  return 0;
}

/* 
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  register const unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    register unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/* 
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  register unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    register char d = *(c++);
    register unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else 
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else 
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/* 
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif


#ifdef __cplusplus
extern "C" {
#endif

/* Remove global namespace pollution */
#if !defined(SWIG_NO_R_NO_REMAP)
# define R_NO_REMAP
#endif
#if !defined(SWIG_NO_STRICT_R_HEADERS)
# define STRICT_R_HEADERS
#endif

#include <Rdefines.h>
#include <Rversion.h>
#include <stdlib.h>
#include <assert.h>

#if R_VERSION >= R_Version(2,6,0)
#define VMAXTYPE void *
#else
#define VMAXTYPE char *
#endif

/*
  This is mainly a way to avoid having lots of local variables that may 
  conflict with those in the routine.

   Change name to R_SWIG_Callb....
*/
typedef struct RCallbackFunctionData {

  SEXP fun;
  SEXP userData;


  SEXP expr;
  SEXP retValue;
  int errorOccurred;

  SEXP el;  /* Temporary pointer used in the construction of the expression to call the R function. */

  struct RCallbackFunctionData *previous;   /* Stack */

} RCallbackFunctionData;

static RCallbackFunctionData  *callbackFunctionDataStack;


SWIGRUNTIME SEXP
R_SWIG_debug_getCallbackFunctionData()
{
  int n, i;
  SEXP ans;
  RCallbackFunctionData  *p = callbackFunctionDataStack;

  n = 0;
  while(p) { 
    n++;
    p = p->previous;
  }

  Rf_protect(ans = Rf_allocVector(VECSXP, n));
  for(p = callbackFunctionDataStack, i = 0; i < n; p = p->previous, i++) 
      SET_VECTOR_ELT(ans, i, p->fun);

  Rf_unprotect(1);

  return(ans);
}



SWIGRUNTIME RCallbackFunctionData *
R_SWIG_pushCallbackFunctionData(SEXP fun, SEXP userData)
{
   RCallbackFunctionData *el;
   el = (RCallbackFunctionData *) calloc(1, sizeof(RCallbackFunctionData));
   el->fun = fun;
   el->userData = userData;
   el->previous = callbackFunctionDataStack;

   callbackFunctionDataStack = el;

   return(el);
}


SWIGRUNTIME SEXP
R_SWIG_R_pushCallbackFunctionData(SEXP fun, SEXP userData)
{
    R_SWIG_pushCallbackFunctionData(fun, userData);
    return R_NilValue;
}

SWIGRUNTIME RCallbackFunctionData *
R_SWIG_getCallbackFunctionData()
{
  if(!callbackFunctionDataStack) {
    Rf_error("Supposedly impossible error occurred in the SWIG callback mechanism."
            "  No callback function data set.");
  }
  
  return callbackFunctionDataStack;
}

SWIGRUNTIME void
R_SWIG_popCallbackFunctionData(int doFree)
{
  RCallbackFunctionData  *el = NULL;
  if(!callbackFunctionDataStack)
    return ; /* Error !!! */

  el = callbackFunctionDataStack ;
  callbackFunctionDataStack = callbackFunctionDataStack->previous;

  if(doFree)
     free(el);
}


/*
  Interface to S function
      is(obj, type)
  which is to be used to determine if an 
  external pointer inherits from the right class.

  Ideally, we would like to be able to do this without an explicit call to the is() function.
  When the S4 class system uses its own SEXP types, then we will hopefully be able to do this
  in the C code.

  Should we make the expression static and preserve it to avoid the overhead of 
  allocating each time.
*/
SWIGRUNTIME int
R_SWIG_checkInherits(SEXP obj, SEXP tag, const char *type)
{
  SEXP e, val;
  int check_err = 0;

  Rf_protect(e = Rf_allocVector(LANGSXP, 3));
  SETCAR(e, Rf_install("extends"));

  SETCAR(CDR(e), Rf_mkString(CHAR(PRINTNAME(tag))));
  SETCAR(CDR(CDR(e)), Rf_mkString(type));

  val = R_tryEval(e, R_GlobalEnv, &check_err);
  Rf_unprotect(1);
  if(check_err) 
    return(0);


  return(LOGICAL(val)[0]);
}


SWIGRUNTIME void *
R_SWIG_resolveExternalRef(SEXP arg, const char * const type, const char * const argName, Rboolean nullOk)
{
  void *ptr;
  SEXP orig = arg;

  if(TYPEOF(arg) != EXTPTRSXP) 
    arg = GET_SLOT(arg, Rf_mkString("ref"));

  
  if(TYPEOF(arg) != EXTPTRSXP) {
    Rf_error("argument %s must be an external pointer (from an ExternalReference)", argName);
  }


  ptr = R_ExternalPtrAddr(arg);

  if(ptr == NULL && nullOk == (Rboolean) FALSE) {
    Rf_error("the external pointer (of type %s) for argument %s has value NULL", argName, type);
  }

  if(type[0] && R_ExternalPtrTag(arg) != Rf_install(type) && strcmp(type, "voidRef")
      && !R_SWIG_checkInherits(orig,  R_ExternalPtrTag(arg), type)) {
    Rf_error("the external pointer for argument %s has tag %s, not the expected value %s",
             argName, CHAR(PRINTNAME(R_ExternalPtrTag(arg))), type);
  }


  return(ptr);
}

SWIGRUNTIME void
R_SWIG_ReferenceFinalizer(SEXP el)
{
  void *ptr = R_SWIG_resolveExternalRef(el, "", "<finalizer>",  (Rboolean) 1);
  fprintf(stderr, "In R_SWIG_ReferenceFinalizer for %p\n", ptr);
  Rf_PrintValue(el);

  if(ptr) {
     if(TYPEOF(el) != EXTPTRSXP)
        el = GET_SLOT(el, Rf_mkString("ref"));

     if(TYPEOF(el) == EXTPTRSXP)
        R_ClearExternalPtr(el);

     free(ptr);
  }

  return;
}

typedef enum {R_SWIG_EXTERNAL, R_SWIG_OWNER } R_SWIG_Owner;

SWIGRUNTIME SEXP
SWIG_MakePtr(void *ptr, const char *typeName, R_SWIG_Owner owner)
{
  SEXP external, r_obj;
  const char *p = typeName;

  if(typeName[0] == '_')
     p = typeName + 1;

  Rf_protect(external = R_MakeExternalPtr(ptr, Rf_install(typeName), R_NilValue));
  Rf_protect(r_obj = NEW_OBJECT(MAKE_CLASS((char *) typeName)));

  if(owner)
    R_RegisterCFinalizer(external, R_SWIG_ReferenceFinalizer);

  r_obj = SET_SLOT(r_obj, Rf_mkString((char *) "ref"), external);
  SET_S4_OBJECT(r_obj);
  Rf_unprotect(2);

  return(r_obj);
}


SWIGRUNTIME SEXP
R_SWIG_create_SWIG_R_Array(const char *typeName, SEXP ref, int len)
{
   SEXP arr;

/*XXX remove the char * cast when we can. MAKE_CLASS should be declared appropriately. */
   Rf_protect(arr = NEW_OBJECT(MAKE_CLASS((char *) typeName)));
   Rf_protect(arr = R_do_slot_assign(arr, Rf_mkString("ref"), ref));
   Rf_protect(arr = R_do_slot_assign(arr, Rf_mkString("dims"), Rf_ScalarInteger(len)));

   Rf_unprotect(3); 			   
   SET_S4_OBJECT(arr);	
   return arr;
}

#define ADD_OUTPUT_ARG(result, pos, value, name)  r_ans = AddOutputArgToReturn(pos, value, name, OutputValues);

SWIGRUNTIME SEXP
AddOutputArgToReturn(int pos, SEXP value, const char *name, SEXP output)
{
  SET_VECTOR_ELT(output, pos, value);

  return(output);
}

/* Create a new pointer object */
SWIGRUNTIMEINLINE SEXP
SWIG_R_NewPointerObj(void *ptr, swig_type_info *type, int flags) {
  SEXP rptr = R_MakeExternalPtr(ptr, 
  R_MakeExternalPtr(type, R_NilValue, R_NilValue), R_NilValue); 
  SET_S4_OBJECT(rptr);
//  rptr = Rf_setAttrib(rptr, R_ClassSymbol, mkChar(SWIG_TypeName(type)));
  return rptr;
}

/* Convert a pointer value */
SWIGRUNTIMEINLINE int
SWIG_R_ConvertPtr(SEXP obj, void **ptr, swig_type_info *ty, int flags) {
  void *vptr;
  if (!obj) return SWIG_ERROR;
  if (obj == R_NilValue) {
    if (ptr) *ptr = NULL;
    return SWIG_OK;
  }

  vptr = R_ExternalPtrAddr(obj);
  if (ty) {
    swig_type_info *to = (swig_type_info*) 
      R_ExternalPtrAddr(R_ExternalPtrTag(obj));
    if (to == ty) {
      if (ptr) *ptr = vptr;
    } else {
      swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
      int newmemory = 0;
      if (ptr) *ptr = SWIG_TypeCast(tc,vptr,&newmemory);
      assert(!newmemory); /* newmemory handling not yet implemented */
    }
  } else {
      if (ptr) *ptr = vptr;
 }
  return SWIG_OK;
}

SWIGRUNTIME swig_module_info *
SWIG_GetModule(void *v) {
  static void *type_pointer = (void *)0;
  return (swig_module_info *) type_pointer;
}

SWIGRUNTIME void
SWIG_SetModule(void *v, swig_module_info *swig_module) {
}

typedef struct {
  void *pack;
  swig_type_info *ty;
  size_t size;
} RSwigPacked;

/* Create a new packed object */

SWIGRUNTIMEINLINE SEXP RSwigPacked_New(void *ptr, size_t sz,
		  swig_type_info *ty) {
  SEXP rptr;
  RSwigPacked *sobj = 
  (RSwigPacked*) malloc(sizeof(RSwigPacked));
  if (sobj) {
    void *pack = malloc(sz);
    if (pack) {
      memcpy(pack, ptr, sz);
      sobj->pack = pack;
      sobj->ty   = ty;
      sobj->size = sz;
    } else {
      sobj = 0;
    }
  }
  rptr = R_MakeExternalPtr(sobj, R_NilValue, R_NilValue); 
  return rptr;
}

SWIGRUNTIME swig_type_info *
RSwigPacked_UnpackData(SEXP obj, void *ptr, size_t size)
{
    RSwigPacked *sobj = 
        (RSwigPacked *)R_ExternalPtrAddr(obj);
    if (sobj->size != size) return 0;
    memcpy(ptr, sobj->pack, size);
    return sobj->ty;
}

SWIGRUNTIMEINLINE SEXP
SWIG_R_NewPackedObj(void *ptr, size_t sz, swig_type_info *type) {
  return ptr ? RSwigPacked_New((void *) ptr, sz, type) : R_NilValue;
}

/* Convert a packed value value */

SWIGRUNTIME int
SWIG_R_ConvertPacked(SEXP obj, void *ptr, size_t sz, swig_type_info *ty) {
  swig_type_info *to = RSwigPacked_UnpackData(obj, ptr, sz);
  if (!to) return SWIG_ERROR;
  if (ty) {
    if (to != ty) {
      /* check type cast? */
      swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
      if (!tc) return SWIG_ERROR;
    }
  }
  return SWIG_OK;
}  

#ifdef __cplusplus
}
#endif



#define SWIG_exception_fail(code, msg) do { Rf_warning(msg); return Rf_ScalarLogical(NA_LOGICAL); return Rf_ScalarLogical(NA_LOGICAL); } while(0) 

#define SWIG_contract_assert(expr, msg) if (!(expr)) { Rf_warning(msg); return Rf_ScalarLogical(NA_LOGICAL); return Rf_ScalarLogical(NA_LOGICAL); } else 



/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_Circle swig_types[0]
#define SWIGTYPE_p_Link swig_types[1]
#define SWIGTYPE_p_NetLearnParameters swig_types[2]
#define SWIGTYPE_p_PosType swig_types[3]
#define SWIGTYPE_p_PositionVector swig_types[4]
#define SWIGTYPE_p_Shape swig_types[5]
#define SWIGTYPE_p_Square swig_types[6]
#define SWIGTYPE_p_UnitList swig_types[7]
#define SWIGTYPE_p_char swig_types[8]
#define SWIGTYPE_p_f_int__void swig_types[9]
#define SWIGTYPE_p_float swig_types[10]
#define SWIGTYPE_p_int swig_types[11]
#define SWIGTYPE_p_p_PositionVector swig_types[12]
#define SWIGTYPE_p_p_char swig_types[13]
#define SWIGTYPE_p_p_double swig_types[14]
#define SWIGTYPE_p_p_float swig_types[15]
#define SWIGTYPE_p_p_int swig_types[16]
#define SWIGTYPE_p_pattern_descriptor swig_types[17]
#define SWIGTYPE_p_pattern_set_info swig_types[18]
#define SWIGTYPE_p_unsigned_int swig_types[19]
static swig_type_info *swig_types[21];
static swig_module_info swig_module = {swig_types, 20, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */


/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif


/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1 
#define  SWIG_IOError        	   -2 
#define  SWIG_RuntimeError   	   -3 
#define  SWIG_IndexError     	   -4 
#define  SWIG_TypeError      	   -5 
#define  SWIG_DivisionByZero 	   -6 
#define  SWIG_OverflowError  	   -7 
#define  SWIG_SyntaxError    	   -8 
#define  SWIG_ValueError     	   -9 
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12 
#define  SWIG_NullReferenceError   -13




#define SWIGVERSION 0x020001 
#define SWIG_VERSION SWIGVERSION


#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a)) 


#include <stdexcept>


#include <stdio.h>
#include <stdlib.h>

#include "RSNNS_kr_ui.h"

//#include "glob_typ.h"
//#include "kr_ui.h"

//#include "krui_typ.h"
//#include "kr_const.h"
//#include "ext_typ.h"
//#include "kr_typ.h"
//#include "enzo_mem_typ.h"
//#include "trans_f.h"
//#include "kernel.h"


extern "C" int testTrainNeuralNetwork (int a, int b, int *c);
extern "C" int testTrainNeuralNetworkWrapper(void);
extern "C" int getFuncInfoWrapper(int a);
extern "C" char* getFuncInfoWrapper2(int funcno, int *functype);
extern "C" void encoderExample(void);

//extern "C" float myLearnAllPatterns();

extern "C" krui_err myBackpropLearnAllPatterns(float decay, float *learnAllPatternsError);

#include "example.h"

#include "RSNNS_krui.h"



typedef struct SWIGCDATA {
    char *data;
    size_t   len;
} SWIGCDATA;



extern "C"  {    


static SWIGCDATA cdata_void(void *ptr, size_t nelements)



{
  SWIGCDATA d;
  d.data = (char *) ptr;



  d.len  = nelements;

   return d;
}

}



#include <limits.h>
#if !defined(SWIG_NO_LLONG_MAX)
# if !defined(LLONG_MAX) && defined(__GNUC__) && defined (__LONG_LONG_MAX__)
#   define LLONG_MAX __LONG_LONG_MAX__
#   define LLONG_MIN (-LLONG_MAX - 1LL)
#   define ULLONG_MAX (LLONG_MAX * 2ULL + 1ULL)
# endif
#endif


SWIGINTERNINLINE  int
SWIG_AsVal_long (SEXP obj, long *val)
{
   if (val) *val = Rf_asInteger(obj);
   return SWIG_OK;
}


SWIGINTERN int
SWIG_AsVal_int (SEXP obj, int *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < INT_MIN || v > INT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< int >(v);
    }
  }  
  return res;
}


SWIGINTERN SEXP
SWIG_FromCharPtrAndSize(const char* carray, size_t size) 
{
  SEXP t, c;
  if (!carray) return R_NilValue;
/* See R internals document 1.10.  
   MkCharLen was introduced in 2.7.0.  Use that instead of hand
   creating vector.

   Starting in 2.8.0 creating strings via vectors was deprecated in
   order to allow for use of CHARSXP caches. */

  Rf_protect(t = Rf_allocVector(STRSXP, 1));



  c = Rf_allocVector(CHARSXP, size);
  strncpy((char *)CHAR(c), carray, size);

  SET_STRING_ELT(t, 0, c);
  Rf_unprotect(1);
  return t;
}


SWIGINTERN int
SWIG_AsCharPtrAndSize(SEXP obj, char** cptr, size_t* psize, int *alloc)
{
  if (cptr && Rf_isString(obj)) {
    char *cstr = const_cast< char * >(CHAR(STRING_ELT(obj, 0)));
    int len = strlen(cstr);

    if (alloc) {
      if (*alloc == SWIG_NEWOBJ) {
        *cptr = reinterpret_cast< char* >(memcpy((new char[len + 1]), cstr, sizeof(char)*(len + 1)));
        *alloc = SWIG_NEWOBJ;
      } else {
        *cptr = cstr;
      }
    } else {
      *cptr = reinterpret_cast< char * >(malloc(len + 1));
      *cptr = strcpy(*cptr, cstr);
    }
    if (psize) *psize = len + 1;
    return SWIG_OK;
  }
  return SWIG_TypeError;
}


SWIGINTERNINLINE SEXP
SWIG_From_long  (long value)
{
	return Rf_ScalarInteger((int)value);
}


SWIGINTERNINLINE SEXP
SWIG_From_int  (int value)
{    
  return SWIG_From_long  (value);
}


SWIGINTERN char *
SWIG_strdup(const char *str)
{
  char *newstr = reinterpret_cast< char * >(malloc(strlen(str) + 1));
  return strcpy(newstr, str);
}





SWIGINTERNINLINE SEXP
SWIG_From_double  (double value)
{
	return Rf_ScalarReal(value);
}


SWIGINTERNINLINE SEXP
SWIG_From_float  (float value)
{    
  return SWIG_From_double  (value);
}


#include <float.h>


SWIGINTERNINLINE  int
SWIG_AsVal_double (SEXP obj, double *val)
{
   if (val) *val = Rf_asReal(obj);
   return SWIG_OK;
}


SWIGINTERN int
SWIG_AsVal_float (SEXP obj, float *val)
{
  double v;
  int res = SWIG_AsVal_double (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < -FLT_MAX || v > FLT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< float >(v);
    }
  }  
  return res;
}


SWIGINTERN int
SWIG_AsVal_bool (SEXP obj, bool *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, val ? &v : 0);
  if (SWIG_IsOK(res)) {    
    if (val) *val = v ? TRUE : FALSE;
    return res;
  }  
  return SWIG_TypeError;
}


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT SEXP
R_swig_cdata ( SEXP ptr, SEXP nelements, SEXP s_swig_copy)
{
  SWIGCDATA result;
  void *arg1 = (void *) 0 ;
  size_t arg2 = (size_t) 1 ;
  int res1 ;
  int val2 ;
  int ecode2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(ptr, SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cdata" "', argument " "1"" of type '" "void *""'"); 
  }
  ecode2 = SWIG_AsVal_int(nelements, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cdata" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  result = cdata_void(arg1,arg2);
  r_ans = SWIG_FromCharPtrAndSize((&result)->data,(&result)->len);
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_memmove ( SEXP data, SEXP indata)
{
  void *arg1 = (void *) 0 ;
  void *arg2 = (void *) 0 ;
  size_t arg3 ;
  int res1 ;
  int res2 ;
  char *buf2 = 0 ;
  size_t size2 = 0 ;
  int alloc2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(data, SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "memmove" "', argument " "1"" of type '" "void *""'"); 
  }
  res2 = SWIG_AsCharPtrAndSize(indata, &buf2, &size2, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "memmove" "', argument " "2"" of type '" "void const *""'");
  }
  arg2 = reinterpret_cast< void * >(buf2);
  arg3 = static_cast< size_t >(size2);
  memmove(arg1,(void const *)arg2,arg3);
  r_ans = R_NilValue;
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_PosType_x_set ( SEXP self, SEXP s_x)
{
  PosType *arg1 = (PosType *) 0 ;
  short arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PosType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PosType_x_set" "', argument " "1"" of type '" "PosType *""'"); 
  }
  arg1 = reinterpret_cast< PosType * >(argp1);
  ecode2 = SWIG_AsVal_int(s_x, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PosType_x_set" "', argument " "2"" of type '" "short""'");
  } 
  arg2 = static_cast< short >(val2);
  if (arg1) (arg1)->x = arg2;
  r_ans = R_NilValue;
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_PosType_x_get ( SEXP self, SEXP s_swig_copy)
{
  short result;
  PosType *arg1 = (PosType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PosType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PosType_x_get" "', argument " "1"" of type '" "PosType *""'"); 
  }
  arg1 = reinterpret_cast< PosType * >(argp1);
  result = (short) ((arg1)->x);
  r_ans = SWIG_From_int(static_cast< int >(result));
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_PosType_y_set ( SEXP self, SEXP s_y)
{
  PosType *arg1 = (PosType *) 0 ;
  short arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PosType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PosType_y_set" "', argument " "1"" of type '" "PosType *""'"); 
  }
  arg1 = reinterpret_cast< PosType * >(argp1);
  ecode2 = SWIG_AsVal_int(s_y, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PosType_y_set" "', argument " "2"" of type '" "short""'");
  } 
  arg2 = static_cast< short >(val2);
  if (arg1) (arg1)->y = arg2;
  r_ans = R_NilValue;
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_PosType_y_get ( SEXP self, SEXP s_swig_copy)
{
  short result;
  PosType *arg1 = (PosType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PosType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PosType_y_get" "', argument " "1"" of type '" "PosType *""'"); 
  }
  arg1 = reinterpret_cast< PosType * >(argp1);
  result = (short) ((arg1)->y);
  r_ans = SWIG_From_int(static_cast< int >(result));
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_PosType_z_set ( SEXP self, SEXP s_z)
{
  PosType *arg1 = (PosType *) 0 ;
  short arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PosType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PosType_z_set" "', argument " "1"" of type '" "PosType *""'"); 
  }
  arg1 = reinterpret_cast< PosType * >(argp1);
  ecode2 = SWIG_AsVal_int(s_z, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PosType_z_set" "', argument " "2"" of type '" "short""'");
  } 
  arg2 = static_cast< short >(val2);
  if (arg1) (arg1)->z = arg2;
  r_ans = R_NilValue;
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_PosType_z_get ( SEXP self, SEXP s_swig_copy)
{
  short result;
  PosType *arg1 = (PosType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PosType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PosType_z_get" "', argument " "1"" of type '" "PosType *""'"); 
  }
  arg1 = reinterpret_cast< PosType * >(argp1);
  result = (short) ((arg1)->z);
  r_ans = SWIG_From_int(static_cast< int >(result));
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_new_PosType ( )
{
  PosType *result = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  result = (PosType *)new PosType();
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_PosType, R_SWIG_OWNER |  0 );
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_delete_PosType ( SEXP self)
{
  PosType *arg1 = (PosType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PosType, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_PosType" "', argument " "1"" of type '" "PosType *""'"); 
  }
  arg1 = reinterpret_cast< PosType * >(argp1);
  delete arg1;
  r_ans = R_NilValue;
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  R_ClearExternalPtr(self);
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_krui_countLinks ( SEXP s_swig_copy)
{
  int result;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  result = (int)krui_countLinks();
  r_ans = Rf_ScalarInteger(result);
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


void _p_f_int__void(int s_arg1) {
  int arg1 ;
  RCallbackFunctionData *r_swig_cb_data = R_SWIG_getCallbackFunctionData();
  SEXP r_tmp;
  int r_nprotect = 0;
  char * r_vmax= 0;
  int ecode = 0;
  
  Rf_protect(r_swig_cb_data->expr = Rf_allocVector(LANGSXP, 2));
  r_nprotect++;
  r_swig_cb_data->el = r_swig_cb_data->expr;
  
  SETCAR(r_swig_cb_data->el, r_swig_cb_data->fun);
  r_swig_cb_data->el = CDR(r_swig_cb_data->el);
  
  r_tmp = Rf_ScalarInteger(s_arg1);
  SETCAR(r_swig_cb_data->el, r_tmp);
  r_swig_cb_data->el = CDR(r_swig_cb_data->el);
  
  
  
  r_swig_cb_data->retValue = R_tryEval(r_swig_cb_data->expr, R_GlobalEnv, &r_swig_cb_data->errorOccurred);
  
  if(r_swig_cb_data->errorOccurred) {
    R_SWIG_popCallbackFunctionData(1);
    Rf_error("error in calling R function as a function pointer (_p_f_int__void)");
  }
  R_SWIG_popCallbackFunctionData(1);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  
}


SWIGEXPORT SEXP
R_swig_krui_errorHandler_set ( SEXP s_krui_errorHandler)
{
  void (*arg1)(int) = (void (*)(int)) 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  if(TYPEOF(s_krui_errorHandler) != CLOSXP) {
    {
      int res = SWIG_R_ConvertPtr(s_krui_errorHandler, (void**)(&arg1), SWIGTYPE_p_f_int__void, 0);
      if (!SWIG_IsOK(res)) {
        SWIG_exception_fail(SWIG_ArgError(res), "in method '" "krui_errorHandler_set" "', argument " "1"" of type '" "void (*)(int)""'"); 
      }
    }
  } else {
    arg1 = _p_f_int__void;
    R_SWIG_pushCallbackFunctionData(s_krui_errorHandler, NULL);
  }
  krui_errorHandler = arg1;
  r_ans = R_NilValue;
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_krui_errorHandler_get ( )
{
  void (*result)(int) = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  result = (void (*)(int))krui_errorHandler;
  r_ans = SWIG_R_NewPointerObj((void *)(result), SWIGTYPE_p_f_int__void, 0);
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_krui_error_code_set ( SEXP s_krui_error_code)
{
  int arg1 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  arg1 = static_cast< int >(INTEGER(s_krui_error_code)[0]);
  krui_error_code = arg1;
  r_ans = R_NilValue;
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_krui_error_code_get ( SEXP s_swig_copy)
{
  int result;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  result = (int)krui_error_code;
  r_ans = Rf_ScalarInteger(result);
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_krui_getNoOfUnits ( SEXP s_swig_copy)
{
  int result;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  result = (int)krui_getNoOfUnits();
  r_ans = Rf_ScalarInteger(result);
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_krui_getFirstUnit ( SEXP s_swig_copy)
{
  int result;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  result = (int)krui_getFirstUnit();
  r_ans = Rf_ScalarInteger(result);
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_krui_getNextUnit ( SEXP s_swig_copy)
{
  int result;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  result = (int)krui_getNextUnit();
  r_ans = Rf_ScalarInteger(result);
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_krui_getCurrentUnit ( SEXP s_swig_copy)
{
  int result;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  result = (int)krui_getCurrentUnit();
  r_ans = Rf_ScalarInteger(result);
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_krui_setCurrentUnit ( SEXP unit_no, SEXP s_swig_copy)
{
  krui_err result;
  int arg1 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  arg1 = static_cast< int >(INTEGER(unit_no)[0]);
  result = (krui_err)krui_setCurrentUnit(arg1);
  r_ans = Rf_ScalarInteger(result);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_krui_getUnitName ( SEXP UnitNo)
{
  char *result = 0 ;
  int arg1 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  arg1 = static_cast< int >(INTEGER(UnitNo)[0]);
  result = (char *)krui_getUnitName(arg1);
  r_ans = result ? Rf_mkString(reinterpret_cast< char * >(result)) : R_NilValue;
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_krui_setUnitName ( SEXP unit_no, SEXP unit_name, SEXP s_swig_copy)
{
  krui_err result;
  int arg1 ;
  char *arg2 = (char *) 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  arg1 = static_cast< int >(INTEGER(unit_no)[0]);
  arg2 = reinterpret_cast< char * >(SWIG_strdup(CHAR(STRING_ELT(unit_name, 0))));
  result = (krui_err)krui_setUnitName(arg1,arg2);
  r_ans = Rf_ScalarInteger(result);
  
  free(arg2);
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_krui_searchUnitName ( SEXP unit_name, SEXP s_swig_copy)
{
  int result;
  char *arg1 = (char *) 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  arg1 = reinterpret_cast< char * >(SWIG_strdup(CHAR(STRING_ELT(unit_name, 0))));
  result = (int)krui_searchUnitName(arg1);
  r_ans = Rf_ScalarInteger(result);
  free(arg1);
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_krui_searchNextUnitName ( SEXP s_swig_copy)
{
  int result;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  result = (int)krui_searchNextUnitName();
  r_ans = Rf_ScalarInteger(result);
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_krui_getUnitOutFuncName ( SEXP UnitNo)
{
  char *result = 0 ;
  int arg1 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  arg1 = static_cast< int >(INTEGER(UnitNo)[0]);
  result = (char *)krui_getUnitOutFuncName(arg1);
  r_ans = result ? Rf_mkString(reinterpret_cast< char * >(result)) : R_NilValue;
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_krui_setUnitOutFunc ( SEXP unit_no, SEXP unitOutFuncName, SEXP s_swig_copy)
{
  krui_err result;
  int arg1 ;
  char *arg2 = (char *) 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  arg1 = static_cast< int >(INTEGER(unit_no)[0]);
  arg2 = reinterpret_cast< char * >(SWIG_strdup(CHAR(STRING_ELT(unitOutFuncName, 0))));
  result = (krui_err)krui_setUnitOutFunc(arg1,arg2);
  r_ans = Rf_ScalarInteger(result);
  
  free(arg2);
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_krui_getUnitActFuncName ( SEXP UnitNo)
{
  char *result = 0 ;
  int arg1 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  arg1 = static_cast< int >(INTEGER(UnitNo)[0]);
  result = (char *)krui_getUnitActFuncName(arg1);
  r_ans = result ? Rf_mkString(reinterpret_cast< char * >(result)) : R_NilValue;
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_krui_setUnitActFunc ( SEXP unit_no, SEXP unitActFuncName, SEXP s_swig_copy)
{
  krui_err result;
  int arg1 ;
  char *arg2 = (char *) 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  arg1 = static_cast< int >(INTEGER(unit_no)[0]);
  arg2 = reinterpret_cast< char * >(SWIG_strdup(CHAR(STRING_ELT(unitActFuncName, 0))));
  result = (krui_err)krui_setUnitActFunc(arg1,arg2);
  r_ans = Rf_ScalarInteger(result);
  
  free(arg2);
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_krui_getUnitFTypeName ( SEXP UnitNo)
{
  char *result = 0 ;
  int arg1 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  arg1 = static_cast< int >(INTEGER(UnitNo)[0]);
  result = (char *)krui_getUnitFTypeName(arg1);
  r_ans = result ? Rf_mkString(reinterpret_cast< char * >(result)) : R_NilValue;
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_krui_getUnitActivation ( SEXP UnitNo, SEXP s_swig_copy)
{
  FlintType result;
  int arg1 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  arg1 = static_cast< int >(INTEGER(UnitNo)[0]);
  result = (FlintType)krui_getUnitActivation(arg1);
  r_ans = SWIG_From_float(static_cast< float >(result));
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_krui_setUnitActivation ( SEXP UnitNo, SEXP unit_activation, SEXP s_swig_copy)
{
  krui_err result;
  int arg1 ;
  FlintTypeParam arg2 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  arg1 = static_cast< int >(INTEGER(UnitNo)[0]);
  arg2 = static_cast< FlintTypeParam >(REAL(unit_activation)[0]);
  result = (krui_err)krui_setUnitActivation(arg1,arg2);
  r_ans = Rf_ScalarInteger(result);
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_krui_getUnitInitialActivation ( SEXP UnitNo, SEXP s_swig_copy)
{
  FlintType result;
  int arg1 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  arg1 = static_cast< int >(INTEGER(UnitNo)[0]);
  result = (FlintType)krui_getUnitInitialActivation(arg1);
  r_ans = SWIG_From_float(static_cast< float >(result));
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_krui_setUnitInitialActivation ( SEXP UnitNo, SEXP unit_i_activation)
{
  int arg1 ;
  FlintTypeParam arg2 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  arg1 = static_cast< int >(INTEGER(UnitNo)[0]);
  arg2 = static_cast< FlintTypeParam >(REAL(unit_i_activation)[0]);
  krui_setUnitInitialActivation(arg1,arg2);
  r_ans = R_NilValue;
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_krui_getUnitOutput ( SEXP UnitNo, SEXP s_swig_copy)
{
  FlintType result;
  int arg1 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  arg1 = static_cast< int >(INTEGER(UnitNo)[0]);
  result = (FlintType)krui_getUnitOutput(arg1);
  r_ans = SWIG_From_float(static_cast< float >(result));
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_krui_setUnitOutput ( SEXP unit_no, SEXP unit_output, SEXP s_swig_copy)
{
  krui_err result;
  int arg1 ;
  FlintTypeParam arg2 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  arg1 = static_cast< int >(INTEGER(unit_no)[0]);
  arg2 = static_cast< FlintTypeParam >(REAL(unit_output)[0]);
  result = (krui_err)krui_setUnitOutput(arg1,arg2);
  r_ans = Rf_ScalarInteger(result);
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_krui_getUnitBias ( SEXP UnitNo, SEXP s_swig_copy)
{
  FlintType result;
  int arg1 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  arg1 = static_cast< int >(INTEGER(UnitNo)[0]);
  result = (FlintType)krui_getUnitBias(arg1);
  r_ans = SWIG_From_float(static_cast< float >(result));
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_krui_setUnitBias ( SEXP UnitNo, SEXP unit_bias)
{
  int arg1 ;
  FlintTypeParam arg2 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  arg1 = static_cast< int >(INTEGER(UnitNo)[0]);
  arg2 = static_cast< FlintTypeParam >(REAL(unit_bias)[0]);
  krui_setUnitBias(arg1,arg2);
  r_ans = R_NilValue;
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_krui_getUnitValueA ( SEXP UnitNo, SEXP s_swig_copy)
{
  FlintType result;
  int arg1 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  arg1 = static_cast< int >(INTEGER(UnitNo)[0]);
  result = (FlintType)krui_getUnitValueA(arg1);
  r_ans = SWIG_From_float(static_cast< float >(result));
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_krui_setUnitValueA ( SEXP UnitNo, SEXP unit_valueA)
{
  int arg1 ;
  FlintTypeParam arg2 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  arg1 = static_cast< int >(INTEGER(UnitNo)[0]);
  arg2 = static_cast< FlintTypeParam >(REAL(unit_valueA)[0]);
  krui_setUnitValueA(arg1,arg2);
  r_ans = R_NilValue;
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_krui_getUnitSubnetNo ( SEXP UnitNo, SEXP s_swig_copy)
{
  int result;
  int arg1 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  arg1 = static_cast< int >(INTEGER(UnitNo)[0]);
  result = (int)krui_getUnitSubnetNo(arg1);
  r_ans = Rf_ScalarInteger(result);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_krui_setUnitSubnetNo ( SEXP UnitNo, SEXP subnet_no)
{
  int arg1 ;
  int arg2 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  arg1 = static_cast< int >(INTEGER(UnitNo)[0]);
  arg2 = static_cast< int >(INTEGER(subnet_no)[0]);
  krui_setUnitSubnetNo(arg1,arg2);
  r_ans = R_NilValue;
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_krui_getUnitLayerNo ( SEXP UnitNo, SEXP s_swig_copy)
{
  unsigned short result;
  int arg1 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  arg1 = static_cast< int >(INTEGER(UnitNo)[0]);
  result = (unsigned short)krui_getUnitLayerNo(arg1);
  r_ans = SWIG_From_int(static_cast< int >(result));
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_krui_setUnitLayerNo ( SEXP UnitNo, SEXP layer_no)
{
  int arg1 ;
  int arg2 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  arg1 = static_cast< int >(INTEGER(UnitNo)[0]);
  arg2 = static_cast< int >(INTEGER(layer_no)[0]);
  krui_setUnitLayerNo(arg1,arg2);
  r_ans = R_NilValue;
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_krui_getUnitPosition ( SEXP UnitNo, SEXP position)
{
  int arg1 ;
  PosType *arg2 = (PosType *) 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  arg1 = static_cast< int >(INTEGER(UnitNo)[0]);
  res2 = SWIG_R_ConvertPtr(position, &argp2, SWIGTYPE_p_PosType, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "krui_getUnitPosition" "', argument " "2"" of type '" "PosType *""'"); 
  }
  arg2 = reinterpret_cast< PosType * >(argp2);
  krui_getUnitPosition(arg1,arg2);
  r_ans = R_NilValue;
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_krui_setUnitPosition ( SEXP UnitNo, SEXP position)
{
  int arg1 ;
  PosType *arg2 = (PosType *) 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  arg1 = static_cast< int >(INTEGER(UnitNo)[0]);
  res2 = SWIG_R_ConvertPtr(position, &argp2, SWIGTYPE_p_PosType, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "krui_setUnitPosition" "', argument " "2"" of type '" "PosType *""'"); 
  }
  arg2 = reinterpret_cast< PosType * >(argp2);
  krui_setUnitPosition(arg1,arg2);
  r_ans = R_NilValue;
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_krui_getUnitNoAtPosition ( SEXP position, SEXP subnet_no, SEXP s_swig_copy)
{
  int result;
  PosType *arg1 = (PosType *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(position, &argp1, SWIGTYPE_p_PosType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "krui_getUnitNoAtPosition" "', argument " "1"" of type '" "PosType *""'"); 
  }
  arg1 = reinterpret_cast< PosType * >(argp1);
  arg2 = static_cast< int >(INTEGER(subnet_no)[0]);
  result = (int)krui_getUnitNoAtPosition(arg1,arg2);
  r_ans = Rf_ScalarInteger(result);
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_krui_getUnitNoNearPosition ( SEXP position, SEXP subnet_no, SEXP range, SEXP gridWidth, SEXP s_swig_copy)
{
  int result;
  PosType *arg1 = (PosType *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(position, &argp1, SWIGTYPE_p_PosType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "krui_getUnitNoNearPosition" "', argument " "1"" of type '" "PosType *""'"); 
  }
  arg1 = reinterpret_cast< PosType * >(argp1);
  arg2 = static_cast< int >(INTEGER(subnet_no)[0]);
  arg3 = static_cast< int >(INTEGER(range)[0]);
  arg4 = static_cast< int >(INTEGER(gridWidth)[0]);
  result = (int)krui_getUnitNoNearPosition(arg1,arg2,arg3,arg4);
  r_ans = Rf_ScalarInteger(result);
  
  
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_krui_getUnitTType ( SEXP unit_no, SEXP s_swig_copy)
{
  int result;
  int arg1 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  arg1 = static_cast< int >(INTEGER(unit_no)[0]);
  result = (int)krui_getUnitTType(arg1);
  r_ans = Rf_ScalarInteger(result);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_krui_setUnitTType ( SEXP unit_no, SEXP UnitTType, SEXP s_swig_copy)
{
  krui_err result;
  int arg1 ;
  int arg2 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  arg1 = static_cast< int >(INTEGER(unit_no)[0]);
  arg2 = static_cast< int >(INTEGER(UnitTType)[0]);
  result = (krui_err)krui_setUnitTType(arg1,arg2);
  r_ans = Rf_ScalarInteger(result);
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_krui_freezeUnit ( SEXP unit_no, SEXP s_swig_copy)
{
  krui_err result;
  int arg1 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  arg1 = static_cast< int >(INTEGER(unit_no)[0]);
  result = (krui_err)krui_freezeUnit(arg1);
  r_ans = Rf_ScalarInteger(result);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_krui_unfreezeUnit ( SEXP unit_no, SEXP s_swig_copy)
{
  krui_err result;
  int arg1 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  arg1 = static_cast< int >(INTEGER(unit_no)[0]);
  result = (krui_err)krui_unfreezeUnit(arg1);
  r_ans = Rf_ScalarInteger(result);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_krui_isUnitFrozen ( SEXP unit_no, SEXP s_swig_copy)
{
  bool result;
  int arg1 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  arg1 = static_cast< int >(INTEGER(unit_no)[0]);
  result = (bool)krui_isUnitFrozen(arg1);
  r_ans = Rf_ScalarLogical(result);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_krui_getUnitInputType ( SEXP unit_no, SEXP s_swig_copy)
{
  int result;
  int arg1 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  arg1 = static_cast< int >(INTEGER(unit_no)[0]);
  result = (int)krui_getUnitInputType(arg1);
  r_ans = Rf_ScalarInteger(result);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_krui_createDefaultUnit ( SEXP s_swig_copy)
{
  int result;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  result = (int)krui_createDefaultUnit();
  r_ans = Rf_ScalarInteger(result);
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_krui_createUnit ( SEXP unit_name, SEXP out_func_name, SEXP act_func_name, SEXP i_act, SEXP bias, SEXP s_swig_copy)
{
  int result;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  FlintTypeParam arg4 ;
  FlintTypeParam arg5 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  arg1 = reinterpret_cast< char * >(SWIG_strdup(CHAR(STRING_ELT(unit_name, 0))));
  arg2 = reinterpret_cast< char * >(SWIG_strdup(CHAR(STRING_ELT(out_func_name, 0))));
  arg3 = reinterpret_cast< char * >(SWIG_strdup(CHAR(STRING_ELT(act_func_name, 0))));
  arg4 = static_cast< FlintTypeParam >(REAL(i_act)[0]);
  arg5 = static_cast< FlintTypeParam >(REAL(bias)[0]);
  result = (int)krui_createUnit(arg1,arg2,arg3,arg4,arg5);
  r_ans = Rf_ScalarInteger(result);
  free(arg1);
  free(arg2);
  free(arg3);
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_krui_deleteUnit ( SEXP unit_no, SEXP s_swig_copy)
{
  krui_err result;
  int arg1 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  arg1 = static_cast< int >(INTEGER(unit_no)[0]);
  result = (krui_err)krui_deleteUnit(arg1);
  r_ans = Rf_ScalarInteger(result);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_krui_deleteUnitList ( SEXP no_of_units, SEXP unit_list, SEXP s_swig_copy)
{
  krui_err result;
  int arg1 ;
  int *arg2 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  arg1 = static_cast< int >(INTEGER(no_of_units)[0]);
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(unit_list);
      arg2 = static_cast< int * >(calloc(sizeof(int), _rswiglen));
      for (_rswigi=0; _rswigi< _rswiglen; _rswigi++) {
        arg2[_rswigi] = INTEGER(unit_list)[_rswigi];
      }
    }
  }
  result = (krui_err)krui_deleteUnitList(arg1,arg2);
  r_ans = Rf_ScalarInteger(result);
  
  
  //free(arg2);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_krui_createFTypeUnit ( SEXP Ftype_symbol, SEXP s_swig_copy)
{
  int result;
  char *arg1 = (char *) 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  arg1 = reinterpret_cast< char * >(SWIG_strdup(CHAR(STRING_ELT(Ftype_symbol, 0))));
  result = (int)krui_createFTypeUnit(arg1);
  r_ans = Rf_ScalarInteger(result);
  free(arg1);
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_krui_setUnitFType ( SEXP unit_no, SEXP Ftype_symbol, SEXP s_swig_copy)
{
  krui_err result;
  int arg1 ;
  char *arg2 = (char *) 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  arg1 = static_cast< int >(INTEGER(unit_no)[0]);
  arg2 = reinterpret_cast< char * >(SWIG_strdup(CHAR(STRING_ELT(Ftype_symbol, 0))));
  result = (krui_err)krui_setUnitFType(arg1,arg2);
  r_ans = Rf_ScalarInteger(result);
  
  free(arg2);
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_krui_copyUnit ( SEXP unit_no, SEXP copy_mode, SEXP s_swig_copy)
{
  int result;
  int arg1 ;
  int arg2 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  arg1 = static_cast< int >(INTEGER(unit_no)[0]);
  arg2 = static_cast< int >(INTEGER(copy_mode)[0]);
  result = (int)krui_copyUnit(arg1,arg2);
  r_ans = Rf_ScalarInteger(result);
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_krui_setFirstFTypeEntry ( SEXP s_swig_copy)
{
  bool result;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  result = (bool)krui_setFirstFTypeEntry();
  r_ans = Rf_ScalarLogical(result);
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_krui_setNextFTypeEntry ( SEXP s_swig_copy)
{
  bool result;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  result = (bool)krui_setNextFTypeEntry();
  r_ans = Rf_ScalarLogical(result);
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_krui_setFTypeEntry ( SEXP Ftype_symbol, SEXP s_swig_copy)
{
  bool result;
  char *arg1 = (char *) 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  arg1 = reinterpret_cast< char * >(SWIG_strdup(CHAR(STRING_ELT(Ftype_symbol, 0))));
  result = (bool)krui_setFTypeEntry(arg1);
  r_ans = Rf_ScalarLogical(result);
  free(arg1);
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_krui_getFTypeName ( )
{
  char *result = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  result = (char *)krui_getFTypeName();
  r_ans = result ? Rf_mkString(reinterpret_cast< char * >(result)) : R_NilValue;
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_krui_setFTypeName ( SEXP Ftype_symbol, SEXP s_swig_copy)
{
  krui_err result;
  char *arg1 = (char *) 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  arg1 = reinterpret_cast< char * >(SWIG_strdup(CHAR(STRING_ELT(Ftype_symbol, 0))));
  result = (krui_err)krui_setFTypeName(arg1);
  r_ans = Rf_ScalarInteger(result);
  free(arg1);
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_krui_getFTypeActFuncName ( )
{
  char *result = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  result = (char *)krui_getFTypeActFuncName();
  r_ans = result ? Rf_mkString(reinterpret_cast< char * >(result)) : R_NilValue;
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_krui_setFTypeActFunc ( SEXP act_func_name, SEXP s_swig_copy)
{
  krui_err result;
  char *arg1 = (char *) 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  arg1 = reinterpret_cast< char * >(SWIG_strdup(CHAR(STRING_ELT(act_func_name, 0))));
  result = (krui_err)krui_setFTypeActFunc(arg1);
  r_ans = Rf_ScalarInteger(result);
  free(arg1);
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_krui_setFTypeOutFunc ( SEXP out_func_name, SEXP s_swig_copy)
{
  krui_err result;
  char *arg1 = (char *) 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  arg1 = reinterpret_cast< char * >(SWIG_strdup(CHAR(STRING_ELT(out_func_name, 0))));
  result = (krui_err)krui_setFTypeOutFunc(arg1);
  r_ans = Rf_ScalarInteger(result);
  free(arg1);
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_krui_setFirstFTypeSite ( SEXP s_swig_copy)
{
  bool result;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  result = (bool)krui_setFirstFTypeSite();
  r_ans = Rf_ScalarLogical(result);
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_krui_setNextFTypeSite ( SEXP s_swig_copy)
{
  bool result;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  result = (bool)krui_setNextFTypeSite();
  r_ans = Rf_ScalarLogical(result);
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_krui_getFTypeSiteName ( )
{
  char *result = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  result = (char *)krui_getFTypeSiteName();
  r_ans = result ? Rf_mkString(reinterpret_cast< char * >(result)) : R_NilValue;
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_krui_setFTypeSiteName ( SEXP FType_site_name, SEXP s_swig_copy)
{
  krui_err result;
  char *arg1 = (char *) 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  arg1 = reinterpret_cast< char * >(SWIG_strdup(CHAR(STRING_ELT(FType_site_name, 0))));
  result = (krui_err)krui_setFTypeSiteName(arg1);
  r_ans = Rf_ScalarInteger(result);
  free(arg1);
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_krui_createFTypeEntry ( SEXP Ftype_symbol, SEXP act_func_name, SEXP out_func_name, SEXP no_of_sites, SEXP array_of_site_names, SEXP s_swig_copy)
{
  krui_err result;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  char **arg5 = (char **) 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  arg1 = reinterpret_cast< char * >(SWIG_strdup(CHAR(STRING_ELT(Ftype_symbol, 0))));
  arg2 = reinterpret_cast< char * >(SWIG_strdup(CHAR(STRING_ELT(act_func_name, 0))));
  arg3 = reinterpret_cast< char * >(SWIG_strdup(CHAR(STRING_ELT(out_func_name, 0))));
  arg4 = static_cast< int >(INTEGER(no_of_sites)[0]);
  res5 = SWIG_R_ConvertPtr(array_of_site_names, &argp5, SWIGTYPE_p_p_char, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "krui_createFTypeEntry" "', argument " "5"" of type '" "char **""'"); 
  }
  arg5 = reinterpret_cast< char ** >(argp5);
  result = (krui_err)krui_createFTypeEntry(arg1,arg2,arg3,arg4,arg5);
  r_ans = Rf_ScalarInteger(result);
  free(arg1);
  free(arg2);
  free(arg3);
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_krui_deleteFTypeEntry ( SEXP Ftype_symbol, SEXP s_swig_copy)
{
  krui_err result;
  char *arg1 = (char *) 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  arg1 = reinterpret_cast< char * >(SWIG_strdup(CHAR(STRING_ELT(Ftype_symbol, 0))));
  result = (krui_err)krui_deleteFTypeEntry(arg1);
  r_ans = Rf_ScalarInteger(result);
  free(arg1);
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_krui_getNoOfFunctions ( SEXP s_swig_copy)
{
  int result;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  result = (int)krui_getNoOfFunctions();
  r_ans = Rf_ScalarInteger(result);
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_krui_getFuncInfo ( SEXP func_no)
{
  int arg1 ;
  char **arg2 = (char **) 0 ;
  int *arg3 = (int *) 0 ;
  char **temp2 ;
  int temp3 ;
  int res3 = SWIG_TMPOBJ ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  SEXP R_OutputValues;
  
  {
    //   arg2 = temp2;
  }
  arg3 = &temp3;
  arg1 = static_cast< int >(INTEGER(func_no)[0]);
  krui_getFuncInfo(arg1,arg2,arg3);
  r_ans = R_NilValue;
  Rf_protect(R_OutputValues = Rf_allocVector(VECSXP,0));
  r_nprotect += 1;
  r_ans = R_OutputValues;
  if (SWIG_IsTmpObj(res3)) {
    SET_VECTOR_ELT(r_ans, 0, SWIG_From_int((*arg3)));
  } else {
    int new_flags = SWIG_IsNewObj(res3) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    SET_VECTOR_ELT(r_ans, 0, SWIG_R_NewPointerObj((void*)(arg3), SWIGTYPE_p_int, new_flags));
  }
  
  
  
  //free(arg3);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_krui_isFunction ( SEXP func_name, SEXP func_type, SEXP s_swig_copy)
{
  bool result;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  arg1 = reinterpret_cast< char * >(SWIG_strdup(CHAR(STRING_ELT(func_name, 0))));
  arg2 = static_cast< int >(INTEGER(func_type)[0]);
  result = (bool)krui_isFunction(arg1,arg2);
  r_ans = Rf_ScalarLogical(result);
  free(arg1);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_krui_getFuncParamInfo ( SEXP func_name, SEXP func_type, SEXP s_swig_copy)
{
  bool result;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  int temp3 ;
  int res3 = SWIG_TMPOBJ ;
  int temp4 ;
  int res4 = SWIG_TMPOBJ ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  SEXP R_OutputValues;
  
  arg3 = &temp3;
  arg4 = &temp4;
  arg1 = reinterpret_cast< char * >(SWIG_strdup(CHAR(STRING_ELT(func_name, 0))));
  arg2 = static_cast< int >(INTEGER(func_type)[0]);
  result = (bool)krui_getFuncParamInfo(arg1,arg2,arg3,arg4);
  r_ans = Rf_ScalarLogical(result);
  Rf_protect(r_ans);
  Rf_protect(R_OutputValues = Rf_allocVector(VECSXP,3));
  r_nprotect += 2;
  SET_VECTOR_ELT(R_OutputValues, 0, r_ans);
  r_ans = R_OutputValues;
  if (SWIG_IsTmpObj(res3)) {
    SET_VECTOR_ELT(r_ans, 1, SWIG_From_int((*arg3)));
  } else {
    int new_flags = SWIG_IsNewObj(res3) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    SET_VECTOR_ELT(r_ans, 1, SWIG_R_NewPointerObj((void*)(arg3), SWIGTYPE_p_int, new_flags));
  }
  if (SWIG_IsTmpObj(res4)) {
    SET_VECTOR_ELT(r_ans, 2, SWIG_From_int((*arg4)));
  } else {
    int new_flags = SWIG_IsNewObj(res4) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    SET_VECTOR_ELT(r_ans, 2, SWIG_R_NewPointerObj((void*)(arg4), SWIGTYPE_p_int, new_flags));
  }
  free(arg1);
  
  
  //free(arg3);
  
  
  //free(arg4);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_krui_getFirstSiteTableEntry ( SEXP site_name, SEXP site_func, SEXP s_swig_copy)
{
  bool result;
  char **arg1 = (char **) 0 ;
  char **arg2 = (char **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(site_name, &argp1, SWIGTYPE_p_p_char, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "krui_getFirstSiteTableEntry" "', argument " "1"" of type '" "char **""'"); 
  }
  arg1 = reinterpret_cast< char ** >(argp1);
  res2 = SWIG_R_ConvertPtr(site_func, &argp2, SWIGTYPE_p_p_char, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "krui_getFirstSiteTableEntry" "', argument " "2"" of type '" "char **""'"); 
  }
  arg2 = reinterpret_cast< char ** >(argp2);
  result = (bool)krui_getFirstSiteTableEntry(arg1,arg2);
  r_ans = Rf_ScalarLogical(result);
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_krui_getNextSiteTableEntry ( SEXP site_name, SEXP site_func, SEXP s_swig_copy)
{
  bool result;
  char **arg1 = (char **) 0 ;
  char **arg2 = (char **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(site_name, &argp1, SWIGTYPE_p_p_char, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "krui_getNextSiteTableEntry" "', argument " "1"" of type '" "char **""'"); 
  }
  arg1 = reinterpret_cast< char ** >(argp1);
  res2 = SWIG_R_ConvertPtr(site_func, &argp2, SWIGTYPE_p_p_char, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "krui_getNextSiteTableEntry" "', argument " "2"" of type '" "char **""'"); 
  }
  arg2 = reinterpret_cast< char ** >(argp2);
  result = (bool)krui_getNextSiteTableEntry(arg1,arg2);
  r_ans = Rf_ScalarLogical(result);
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_krui_getSiteTableFuncName ( SEXP site_name)
{
  char *result = 0 ;
  char *arg1 = (char *) 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  arg1 = reinterpret_cast< char * >(SWIG_strdup(CHAR(STRING_ELT(site_name, 0))));
  result = (char *)krui_getSiteTableFuncName(arg1);
  r_ans = result ? Rf_mkString(reinterpret_cast< char * >(result)) : R_NilValue;
  free(arg1);
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_krui_createSiteTableEntry ( SEXP site_name, SEXP site_func, SEXP s_swig_copy)
{
  krui_err result;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  arg1 = reinterpret_cast< char * >(SWIG_strdup(CHAR(STRING_ELT(site_name, 0))));
  arg2 = reinterpret_cast< char * >(SWIG_strdup(CHAR(STRING_ELT(site_func, 0))));
  result = (krui_err)krui_createSiteTableEntry(arg1,arg2);
  r_ans = Rf_ScalarInteger(result);
  free(arg1);
  free(arg2);
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_krui_changeSiteTableEntry ( SEXP old_site_name, SEXP new_site_name, SEXP new_site_func, SEXP s_swig_copy)
{
  krui_err result;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  arg1 = reinterpret_cast< char * >(SWIG_strdup(CHAR(STRING_ELT(old_site_name, 0))));
  arg2 = reinterpret_cast< char * >(SWIG_strdup(CHAR(STRING_ELT(new_site_name, 0))));
  arg3 = reinterpret_cast< char * >(SWIG_strdup(CHAR(STRING_ELT(new_site_func, 0))));
  result = (krui_err)krui_changeSiteTableEntry(arg1,arg2,arg3);
  r_ans = Rf_ScalarInteger(result);
  free(arg1);
  free(arg2);
  free(arg3);
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_krui_deleteSiteTableEntry ( SEXP site_name, SEXP s_swig_copy)
{
  krui_err result;
  char *arg1 = (char *) 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  arg1 = reinterpret_cast< char * >(SWIG_strdup(CHAR(STRING_ELT(site_name, 0))));
  result = (krui_err)krui_deleteSiteTableEntry(arg1);
  r_ans = Rf_ScalarInteger(result);
  free(arg1);
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_krui_setFirstSite ( SEXP s_swig_copy)
{
  bool result;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  result = (bool)krui_setFirstSite();
  r_ans = Rf_ScalarLogical(result);
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_krui_setNextSite ( SEXP s_swig_copy)
{
  bool result;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  result = (bool)krui_setNextSite();
  r_ans = Rf_ScalarLogical(result);
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_krui_setSite ( SEXP site_name, SEXP s_swig_copy)
{
  krui_err result;
  char *arg1 = (char *) 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  arg1 = reinterpret_cast< char * >(SWIG_strdup(CHAR(STRING_ELT(site_name, 0))));
  result = (krui_err)krui_setSite(arg1);
  r_ans = Rf_ScalarInteger(result);
  free(arg1);
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_krui_getSiteValue ( SEXP s_swig_copy)
{
  FlintType result;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  result = (FlintType)krui_getSiteValue();
  r_ans = SWIG_From_float(static_cast< float >(result));
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_krui_getSiteName ( )
{
  char *result = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  result = (char *)krui_getSiteName();
  r_ans = result ? Rf_mkString(reinterpret_cast< char * >(result)) : R_NilValue;
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_krui_setSiteName ( SEXP site_name, SEXP s_swig_copy)
{
  krui_err result;
  char *arg1 = (char *) 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  arg1 = reinterpret_cast< char * >(SWIG_strdup(CHAR(STRING_ELT(site_name, 0))));
  result = (krui_err)krui_setSiteName(arg1);
  r_ans = Rf_ScalarInteger(result);
  free(arg1);
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_krui_getSiteFuncName ( )
{
  char *result = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  result = (char *)krui_getSiteFuncName();
  r_ans = result ? Rf_mkString(reinterpret_cast< char * >(result)) : R_NilValue;
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_krui_addSite ( SEXP site_name, SEXP s_swig_copy)
{
  krui_err result;
  char *arg1 = (char *) 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  arg1 = reinterpret_cast< char * >(SWIG_strdup(CHAR(STRING_ELT(site_name, 0))));
  result = (krui_err)krui_addSite(arg1);
  r_ans = Rf_ScalarInteger(result);
  free(arg1);
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_krui_deleteSite ( SEXP s_swig_copy)
{
  bool result;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  result = (bool)krui_deleteSite();
  r_ans = Rf_ScalarLogical(result);
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_krui_getFirstPredUnit ( SEXP strength, SEXP s_swig_copy)
{
  int result;
  FlintType *arg1 = (FlintType *) 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(strength);
      arg1 = static_cast< FlintType * >(calloc(sizeof(FlintType), _rswiglen));
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        arg1[_rswigi] = REAL(strength)[_rswigi];
      }
    }
  }
  result = (int)krui_getFirstPredUnit(arg1);
  r_ans = Rf_ScalarInteger(result);
  
  //free(arg1);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_krui_getFirstPredUnitAndData ( SEXP strength, SEXP val_a, SEXP val_b, SEXP val_c, SEXP s_swig_copy)
{
  int result;
  FlintType *arg1 = (FlintType *) 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(strength);
      arg1 = static_cast< FlintType * >(calloc(sizeof(FlintType), _rswiglen));
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        arg1[_rswigi] = REAL(strength)[_rswigi];
      }
    }
  }
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(val_a);
      arg2 = static_cast< float * >(calloc(sizeof(float), _rswiglen));
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        arg2[_rswigi] = REAL(val_a)[_rswigi];
      }
    }
  }
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(val_b);
      arg3 = static_cast< float * >(calloc(sizeof(float), _rswiglen));
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        arg3[_rswigi] = REAL(val_b)[_rswigi];
      }
    }
  }
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(val_c);
      arg4 = static_cast< float * >(calloc(sizeof(float), _rswiglen));
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        arg4[_rswigi] = REAL(val_c)[_rswigi];
      }
    }
  }
  result = (int)krui_getFirstPredUnitAndData(arg1,arg2,arg3,arg4);
  r_ans = Rf_ScalarInteger(result);
  
  //free(arg1);
  
  
  //free(arg2);
  
  
  //free(arg3);
  
  
  //free(arg4);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_krui_getNextPredUnit ( SEXP strength, SEXP s_swig_copy)
{
  int result;
  FlintType *arg1 = (FlintType *) 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(strength);
      arg1 = static_cast< FlintType * >(calloc(sizeof(FlintType), _rswiglen));
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        arg1[_rswigi] = REAL(strength)[_rswigi];
      }
    }
  }
  result = (int)krui_getNextPredUnit(arg1);
  r_ans = Rf_ScalarInteger(result);
  
  //free(arg1);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_krui_getNextPredUnitAndData ( SEXP strength, SEXP val_a, SEXP val_b, SEXP val_c, SEXP s_swig_copy)
{
  int result;
  FlintType *arg1 = (FlintType *) 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(strength);
      arg1 = static_cast< FlintType * >(calloc(sizeof(FlintType), _rswiglen));
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        arg1[_rswigi] = REAL(strength)[_rswigi];
      }
    }
  }
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(val_a);
      arg2 = static_cast< float * >(calloc(sizeof(float), _rswiglen));
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        arg2[_rswigi] = REAL(val_a)[_rswigi];
      }
    }
  }
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(val_b);
      arg3 = static_cast< float * >(calloc(sizeof(float), _rswiglen));
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        arg3[_rswigi] = REAL(val_b)[_rswigi];
      }
    }
  }
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(val_c);
      arg4 = static_cast< float * >(calloc(sizeof(float), _rswiglen));
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        arg4[_rswigi] = REAL(val_c)[_rswigi];
      }
    }
  }
  result = (int)krui_getNextPredUnitAndData(arg1,arg2,arg3,arg4);
  r_ans = Rf_ScalarInteger(result);
  
  //free(arg1);
  
  
  //free(arg2);
  
  
  //free(arg3);
  
  
  //free(arg4);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_krui_getCurrentPredUnit ( SEXP strength, SEXP s_swig_copy)
{
  int result;
  FlintType *arg1 = (FlintType *) 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(strength);
      arg1 = static_cast< FlintType * >(calloc(sizeof(FlintType), _rswiglen));
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        arg1[_rswigi] = REAL(strength)[_rswigi];
      }
    }
  }
  result = (int)krui_getCurrentPredUnit(arg1);
  r_ans = Rf_ScalarInteger(result);
  
  //free(arg1);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_krui_getFirstSuccUnit ( SEXP source_unit_no, SEXP weight, SEXP s_swig_copy)
{
  int result;
  int arg1 ;
  FlintType *arg2 = (FlintType *) 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  arg1 = static_cast< int >(INTEGER(source_unit_no)[0]);
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(weight);
      arg2 = static_cast< FlintType * >(calloc(sizeof(FlintType), _rswiglen));
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        arg2[_rswigi] = REAL(weight)[_rswigi];
      }
    }
  }
  result = (int)krui_getFirstSuccUnit(arg1,arg2);
  r_ans = Rf_ScalarInteger(result);
  
  
  //free(arg2);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_krui_getNextSuccUnit ( SEXP weight, SEXP s_swig_copy)
{
  int result;
  FlintType *arg1 = (FlintType *) 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(weight);
      arg1 = static_cast< FlintType * >(calloc(sizeof(FlintType), _rswiglen));
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        arg1[_rswigi] = REAL(weight)[_rswigi];
      }
    }
  }
  result = (int)krui_getNextSuccUnit(arg1);
  r_ans = Rf_ScalarInteger(result);
  
  //free(arg1);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_krui_areConnected ( SEXP source_unit_no, SEXP target_unit_no, SEXP s_swig_copy)
{
  bool result;
  int arg1 ;
  int arg2 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  arg1 = static_cast< int >(INTEGER(source_unit_no)[0]);
  arg2 = static_cast< int >(INTEGER(target_unit_no)[0]);
  result = (bool)krui_areConnected(arg1,arg2);
  r_ans = Rf_ScalarLogical(result);
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_krui_areConnectedWeight ( SEXP source_unit_no, SEXP target_unit_no, SEXP weight, SEXP s_swig_copy)
{
  bool result;
  int arg1 ;
  int arg2 ;
  FlintType *arg3 = (FlintType *) 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  arg1 = static_cast< int >(INTEGER(source_unit_no)[0]);
  arg2 = static_cast< int >(INTEGER(target_unit_no)[0]);
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(weight);
      arg3 = static_cast< FlintType * >(calloc(sizeof(FlintType), _rswiglen));
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        arg3[_rswigi] = REAL(weight)[_rswigi];
      }
    }
  }
  result = (bool)krui_areConnectedWeight(arg1,arg2,arg3);
  r_ans = Rf_ScalarLogical(result);
  
  
  
  //free(arg3);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_krui_isConnected ( SEXP source_unit_no, SEXP s_swig_copy)
{
  bool result;
  int arg1 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  arg1 = static_cast< int >(INTEGER(source_unit_no)[0]);
  result = (bool)krui_isConnected(arg1);
  r_ans = Rf_ScalarLogical(result);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_krui_getLinkWeight ( SEXP s_swig_copy)
{
  FlintType result;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  result = (FlintType)krui_getLinkWeight();
  r_ans = SWIG_From_float(static_cast< float >(result));
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_krui_setLinkWeight ( SEXP weight)
{
  FlintTypeParam arg1 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  arg1 = static_cast< FlintTypeParam >(REAL(weight)[0]);
  krui_setLinkWeight(arg1);
  r_ans = R_NilValue;
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_krui_createLink ( SEXP source_unit_no, SEXP weight, SEXP s_swig_copy)
{
  krui_err result;
  int arg1 ;
  FlintTypeParam arg2 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  arg1 = static_cast< int >(INTEGER(source_unit_no)[0]);
  arg2 = static_cast< FlintTypeParam >(REAL(weight)[0]);
  result = (krui_err)krui_createLink(arg1,arg2);
  r_ans = Rf_ScalarInteger(result);
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_krui_createLinkWithAdditionalParameters ( SEXP source_unit_no, SEXP weight, SEXP val_a, SEXP val_b, SEXP val_c)
{
  Link *result = 0 ;
  int arg1 ;
  FlintTypeParam arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  arg1 = static_cast< int >(INTEGER(source_unit_no)[0]);
  arg2 = static_cast< FlintTypeParam >(REAL(weight)[0]);
  arg3 = static_cast< float >(REAL(val_a)[0]);
  arg4 = static_cast< float >(REAL(val_b)[0]);
  arg5 = static_cast< float >(REAL(val_c)[0]);
  result = (Link *)krui_createLinkWithAdditionalParameters(arg1,arg2,arg3,arg4,arg5);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Link, R_SWIG_EXTERNAL |  0 );
  
  
  
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_krui_deleteLink ( SEXP s_swig_copy)
{
  krui_err result;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  result = (krui_err)krui_deleteLink();
  r_ans = Rf_ScalarInteger(result);
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_krui_deleteAllInputLinks ( SEXP s_swig_copy)
{
  krui_err result;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  result = (krui_err)krui_deleteAllInputLinks();
  r_ans = Rf_ScalarInteger(result);
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_krui_deleteAllOutputLinks ( SEXP s_swig_copy)
{
  krui_err result;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  result = (krui_err)krui_deleteAllOutputLinks();
  r_ans = Rf_ScalarInteger(result);
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_krui_jogWeights ( SEXP minus, SEXP plus)
{
  FlintTypeParam arg1 ;
  FlintTypeParam arg2 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  arg1 = static_cast< FlintTypeParam >(REAL(minus)[0]);
  arg2 = static_cast< FlintTypeParam >(REAL(plus)[0]);
  krui_jogWeights(arg1,arg2);
  r_ans = R_NilValue;
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_krui_jogCorrWeights ( SEXP minus, SEXP plus, SEXP mincorr, SEXP s_swig_copy)
{
  krui_err result;
  FlintTypeParam arg1 ;
  FlintTypeParam arg2 ;
  FlintTypeParam arg3 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  arg1 = static_cast< FlintTypeParam >(REAL(minus)[0]);
  arg2 = static_cast< FlintTypeParam >(REAL(plus)[0]);
  arg3 = static_cast< FlintTypeParam >(REAL(mincorr)[0]);
  result = (krui_err)krui_jogCorrWeights(arg1,arg2,arg3);
  r_ans = Rf_ScalarInteger(result);
  
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_krui_updateSingleUnit ( SEXP unit_no, SEXP s_swig_copy)
{
  krui_err result;
  int arg1 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  arg1 = static_cast< int >(INTEGER(unit_no)[0]);
  result = (krui_err)krui_updateSingleUnit(arg1);
  r_ans = Rf_ScalarInteger(result);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_krui_getUpdateFunc ( )
{
  char *result = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  result = (char *)krui_getUpdateFunc();
  r_ans = result ? Rf_mkString(reinterpret_cast< char * >(result)) : R_NilValue;
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_krui_setUpdateFunc ( SEXP update_func, SEXP s_swig_copy)
{
  krui_err result;
  char *arg1 = (char *) 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  arg1 = reinterpret_cast< char * >(SWIG_strdup(CHAR(STRING_ELT(update_func, 0))));
  result = (krui_err)krui_setUpdateFunc(arg1);
  r_ans = Rf_ScalarInteger(result);
  free(arg1);
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_krui_setRemapFunc ( SEXP name, SEXP params, SEXP s_swig_copy)
{
  krui_err result;
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  arg1 = reinterpret_cast< char * >(SWIG_strdup(CHAR(STRING_ELT(name, 0))));
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(params);
      arg2 = static_cast< float * >(calloc(sizeof(float), _rswiglen));
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        arg2[_rswigi] = REAL(params)[_rswigi];
      }
    }
  }
  result = (krui_err)krui_setRemapFunc(arg1,arg2);
  r_ans = Rf_ScalarInteger(result);
  free(arg1);
  
  //free(arg2);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_krui_updateNet ( SEXP parameterInArray, SEXP NoOfInParams, SEXP s_swig_copy)
{
  krui_err result;
  float *arg1 = (float *) 0 ;
  int arg2 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(parameterInArray);
      arg1 = static_cast< float * >(calloc(sizeof(float), _rswiglen));
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        arg1[_rswigi] = REAL(parameterInArray)[_rswigi];
      }
    }
  }
  arg2 = static_cast< int >(INTEGER(NoOfInParams)[0]);
  result = (krui_err)krui_updateNet(arg1,arg2);
  r_ans = Rf_ScalarInteger(result);
  
  //free(arg1);
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_krui_getInitialisationFunc ( )
{
  char *result = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  result = (char *)krui_getInitialisationFunc();
  r_ans = result ? Rf_mkString(reinterpret_cast< char * >(result)) : R_NilValue;
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_krui_setInitialisationFunc ( SEXP initialisation_func, SEXP s_swig_copy)
{
  krui_err result;
  char *arg1 = (char *) 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  arg1 = reinterpret_cast< char * >(SWIG_strdup(CHAR(STRING_ELT(initialisation_func, 0))));
  result = (krui_err)krui_setInitialisationFunc(arg1);
  r_ans = Rf_ScalarInteger(result);
  free(arg1);
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_krui_initializeNet ( SEXP parameterInArray, SEXP NoOfInParams, SEXP s_swig_copy)
{
  krui_err result;
  float *arg1 = (float *) 0 ;
  int arg2 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(parameterInArray);
      arg1 = static_cast< float * >(calloc(sizeof(float), _rswiglen));
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        arg1[_rswigi] = REAL(parameterInArray)[_rswigi];
      }
    }
  }
  arg2 = static_cast< int >(INTEGER(NoOfInParams)[0]);
  result = (krui_err)krui_initializeNet(arg1,arg2);
  r_ans = Rf_ScalarInteger(result);
  
  //free(arg1);
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_krui_getLearnFunc ( )
{
  char *result = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  result = (char *)krui_getLearnFunc();
  r_ans = result ? Rf_mkString(reinterpret_cast< char * >(result)) : R_NilValue;
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_krui_setLearnFunc ( SEXP learning_func, SEXP s_swig_copy)
{
  krui_err result;
  char *arg1 = (char *) 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  arg1 = reinterpret_cast< char * >(SWIG_strdup(CHAR(STRING_ELT(learning_func, 0))));
  result = (krui_err)krui_setLearnFunc(arg1);
  r_ans = Rf_ScalarInteger(result);
  free(arg1);
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_krui_trainNetwork ( SEXP parameters, SEXP s_swig_copy)
{
  krui_err result;
  NetLearnParameters *arg1 = (NetLearnParameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(parameters, &argp1, SWIGTYPE_p_NetLearnParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "krui_trainNetwork" "', argument " "1"" of type '" "NetLearnParameters *""'"); 
  }
  arg1 = reinterpret_cast< NetLearnParameters * >(argp1);
  result = (krui_err)krui_trainNetwork(arg1);
  r_ans = Rf_ScalarInteger(result);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_krui_getNetworkErrorArray ( SEXP learnErrors, SEXP atEpoch, SEXP noOfErrors, SEXP s_swig_copy)
{
  krui_err result;
  double **arg1 = (double **) 0 ;
  int **arg2 = (int **) 0 ;
  int *arg3 = (int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(learnErrors, &argp1, SWIGTYPE_p_p_double, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "krui_getNetworkErrorArray" "', argument " "1"" of type '" "double **""'"); 
  }
  arg1 = reinterpret_cast< double ** >(argp1);
  res2 = SWIG_R_ConvertPtr(atEpoch, &argp2, SWIGTYPE_p_p_int, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "krui_getNetworkErrorArray" "', argument " "2"" of type '" "int **""'"); 
  }
  arg2 = reinterpret_cast< int ** >(argp2);
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(noOfErrors);
      arg3 = static_cast< int * >(calloc(sizeof(int), _rswiglen));
      for (_rswigi=0; _rswigi< _rswiglen; _rswigi++) {
        arg3[_rswigi] = INTEGER(noOfErrors)[_rswigi];
      }
    }
  }
  result = (krui_err)krui_getNetworkErrorArray(arg1,arg2,arg3);
  r_ans = Rf_ScalarInteger(result);
  
  
  
  //free(arg3);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_krui_stopTraining ( SEXP s_swig_copy)
{
  krui_err result;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  result = (krui_err)krui_stopTraining();
  r_ans = Rf_ScalarInteger(result);
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_krui_learnAllPatterns ( SEXP parameterInArray, SEXP NoOfInParams, SEXP s_swig_copy)
{
  krui_err result;
  float *arg1 = (float *) 0 ;
  int arg2 ;
  float **arg3 = (float **) 0 ;
  int *arg4 = (int *) 0 ;
  float **temp3 ;
  int temp4 ;
  int res4 = SWIG_TMPOBJ ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  SEXP R_OutputValues;
  
  {
    //   arg3 = temp3;
  }
  arg4 = &temp4;
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(parameterInArray);
      arg1 = static_cast< float * >(calloc(sizeof(float), _rswiglen));
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        arg1[_rswigi] = REAL(parameterInArray)[_rswigi];
      }
    }
  }
  arg2 = static_cast< int >(INTEGER(NoOfInParams)[0]);
  result = (krui_err)krui_learnAllPatterns(arg1,arg2,arg3,arg4);
  r_ans = Rf_ScalarInteger(result);
  Rf_protect(r_ans);
  Rf_protect(R_OutputValues = Rf_allocVector(VECSXP,2));
  r_nprotect += 2;
  SET_VECTOR_ELT(R_OutputValues, 0, r_ans);
  r_ans = R_OutputValues;
  if (SWIG_IsTmpObj(res4)) {
    SET_VECTOR_ELT(r_ans, 1, SWIG_From_int((*arg4)));
  } else {
    int new_flags = SWIG_IsNewObj(res4) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    SET_VECTOR_ELT(r_ans, 1, SWIG_R_NewPointerObj((void*)(arg4), SWIGTYPE_p_int, new_flags));
  }
  
  //free(arg1);
  
  
  
  
  //free(arg4);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_krui_testAllPatterns ( SEXP parameterInArray, SEXP NoOfInParams, SEXP s_swig_copy)
{
  krui_err result;
  float *arg1 = (float *) 0 ;
  int arg2 ;
  float **arg3 = (float **) 0 ;
  int *arg4 = (int *) 0 ;
  float **temp3 ;
  int temp4 ;
  int res4 = SWIG_TMPOBJ ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  SEXP R_OutputValues;
  
  {
    //   arg3 = temp3;
  }
  arg4 = &temp4;
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(parameterInArray);
      arg1 = static_cast< float * >(calloc(sizeof(float), _rswiglen));
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        arg1[_rswigi] = REAL(parameterInArray)[_rswigi];
      }
    }
  }
  arg2 = static_cast< int >(INTEGER(NoOfInParams)[0]);
  result = (krui_err)krui_testAllPatterns(arg1,arg2,arg3,arg4);
  r_ans = Rf_ScalarInteger(result);
  Rf_protect(r_ans);
  Rf_protect(R_OutputValues = Rf_allocVector(VECSXP,2));
  r_nprotect += 2;
  SET_VECTOR_ELT(R_OutputValues, 0, r_ans);
  r_ans = R_OutputValues;
  if (SWIG_IsTmpObj(res4)) {
    SET_VECTOR_ELT(r_ans, 1, SWIG_From_int((*arg4)));
  } else {
    int new_flags = SWIG_IsNewObj(res4) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    SET_VECTOR_ELT(r_ans, 1, SWIG_R_NewPointerObj((void*)(arg4), SWIGTYPE_p_int, new_flags));
  }
  
  //free(arg1);
  
  
  
  
  //free(arg4);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_krui_learnSinglePattern ( SEXP pattern_no, SEXP parameterInArray, SEXP NoOfInParams, SEXP s_swig_copy)
{
  krui_err result;
  int arg1 ;
  float *arg2 = (float *) 0 ;
  int arg3 ;
  float **arg4 = (float **) 0 ;
  int *arg5 = (int *) 0 ;
  float **temp4 ;
  int temp5 ;
  int res5 = SWIG_TMPOBJ ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  SEXP R_OutputValues;
  
  {
    //   arg4 = temp4;
  }
  arg5 = &temp5;
  arg1 = static_cast< int >(INTEGER(pattern_no)[0]);
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(parameterInArray);
      arg2 = static_cast< float * >(calloc(sizeof(float), _rswiglen));
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        arg2[_rswigi] = REAL(parameterInArray)[_rswigi];
      }
    }
  }
  arg3 = static_cast< int >(INTEGER(NoOfInParams)[0]);
  result = (krui_err)krui_learnSinglePattern(arg1,arg2,arg3,arg4,arg5);
  r_ans = Rf_ScalarInteger(result);
  Rf_protect(r_ans);
  Rf_protect(R_OutputValues = Rf_allocVector(VECSXP,2));
  r_nprotect += 2;
  SET_VECTOR_ELT(R_OutputValues, 0, r_ans);
  r_ans = R_OutputValues;
  if (SWIG_IsTmpObj(res5)) {
    SET_VECTOR_ELT(r_ans, 1, SWIG_From_int((*arg5)));
  } else {
    int new_flags = SWIG_IsNewObj(res5) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    SET_VECTOR_ELT(r_ans, 1, SWIG_R_NewPointerObj((void*)(arg5), SWIGTYPE_p_int, new_flags));
  }
  
  
  //free(arg2);
  
  
  
  
  //free(arg5);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_krui_testSinglePattern ( SEXP pattern_no, SEXP parameterInArray, SEXP NoOfInParams, SEXP s_swig_copy)
{
  krui_err result;
  int arg1 ;
  float *arg2 = (float *) 0 ;
  int arg3 ;
  float **arg4 = (float **) 0 ;
  int *arg5 = (int *) 0 ;
  float **temp4 ;
  int temp5 ;
  int res5 = SWIG_TMPOBJ ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  SEXP R_OutputValues;
  
  {
    //   arg4 = temp4;
  }
  arg5 = &temp5;
  arg1 = static_cast< int >(INTEGER(pattern_no)[0]);
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(parameterInArray);
      arg2 = static_cast< float * >(calloc(sizeof(float), _rswiglen));
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        arg2[_rswigi] = REAL(parameterInArray)[_rswigi];
      }
    }
  }
  arg3 = static_cast< int >(INTEGER(NoOfInParams)[0]);
  result = (krui_err)krui_testSinglePattern(arg1,arg2,arg3,arg4,arg5);
  r_ans = Rf_ScalarInteger(result);
  Rf_protect(r_ans);
  Rf_protect(R_OutputValues = Rf_allocVector(VECSXP,2));
  r_nprotect += 2;
  SET_VECTOR_ELT(R_OutputValues, 0, r_ans);
  r_ans = R_OutputValues;
  if (SWIG_IsTmpObj(res5)) {
    SET_VECTOR_ELT(r_ans, 1, SWIG_From_int((*arg5)));
  } else {
    int new_flags = SWIG_IsNewObj(res5) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    SET_VECTOR_ELT(r_ans, 1, SWIG_R_NewPointerObj((void*)(arg5), SWIGTYPE_p_int, new_flags));
  }
  
  
  //free(arg2);
  
  
  
  
  //free(arg5);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_krui_checkPruning ( SEXP s_swig_copy)
{
  int result;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  result = (int)krui_checkPruning();
  r_ans = Rf_ScalarInteger(result);
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_krui_learnAllPatternsFF ( SEXP parameterInArray, SEXP NoOfInParams, SEXP s_swig_copy)
{
  krui_err result;
  float *arg1 = (float *) 0 ;
  int arg2 ;
  float **arg3 = (float **) 0 ;
  int *arg4 = (int *) 0 ;
  float **temp3 ;
  int temp4 ;
  int res4 = SWIG_TMPOBJ ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  SEXP R_OutputValues;
  
  {
    //   arg3 = temp3;
  }
  arg4 = &temp4;
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(parameterInArray);
      arg1 = static_cast< float * >(calloc(sizeof(float), _rswiglen));
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        arg1[_rswigi] = REAL(parameterInArray)[_rswigi];
      }
    }
  }
  arg2 = static_cast< int >(INTEGER(NoOfInParams)[0]);
  result = (krui_err)krui_learnAllPatternsFF(arg1,arg2,arg3,arg4);
  r_ans = Rf_ScalarInteger(result);
  Rf_protect(r_ans);
  Rf_protect(R_OutputValues = Rf_allocVector(VECSXP,2));
  r_nprotect += 2;
  SET_VECTOR_ELT(R_OutputValues, 0, r_ans);
  r_ans = R_OutputValues;
  if (SWIG_IsTmpObj(res4)) {
    SET_VECTOR_ELT(r_ans, 1, SWIG_From_int((*arg4)));
  } else {
    int new_flags = SWIG_IsNewObj(res4) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    SET_VECTOR_ELT(r_ans, 1, SWIG_R_NewPointerObj((void*)(arg4), SWIGTYPE_p_int, new_flags));
  }
  
  //free(arg1);
  
  
  
  
  //free(arg4);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_krui_learnSinglePatternFF ( SEXP pattern_no, SEXP parameterInArray, SEXP NoOfInParams, SEXP s_swig_copy)
{
  krui_err result;
  int arg1 ;
  float *arg2 = (float *) 0 ;
  int arg3 ;
  float **arg4 = (float **) 0 ;
  int *arg5 = (int *) 0 ;
  float **temp4 ;
  int temp5 ;
  int res5 = SWIG_TMPOBJ ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  SEXP R_OutputValues;
  
  {
    //   arg4 = temp4;
  }
  arg5 = &temp5;
  arg1 = static_cast< int >(INTEGER(pattern_no)[0]);
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(parameterInArray);
      arg2 = static_cast< float * >(calloc(sizeof(float), _rswiglen));
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        arg2[_rswigi] = REAL(parameterInArray)[_rswigi];
      }
    }
  }
  arg3 = static_cast< int >(INTEGER(NoOfInParams)[0]);
  result = (krui_err)krui_learnSinglePatternFF(arg1,arg2,arg3,arg4,arg5);
  r_ans = Rf_ScalarInteger(result);
  Rf_protect(r_ans);
  Rf_protect(R_OutputValues = Rf_allocVector(VECSXP,2));
  r_nprotect += 2;
  SET_VECTOR_ELT(R_OutputValues, 0, r_ans);
  r_ans = R_OutputValues;
  if (SWIG_IsTmpObj(res5)) {
    SET_VECTOR_ELT(r_ans, 1, SWIG_From_int((*arg5)));
  } else {
    int new_flags = SWIG_IsNewObj(res5) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    SET_VECTOR_ELT(r_ans, 1, SWIG_R_NewPointerObj((void*)(arg5), SWIGTYPE_p_int, new_flags));
  }
  
  
  //free(arg2);
  
  
  
  
  //free(arg5);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_krui_setClassDistribution ( SEXP classDist, SEXP s_swig_copy)
{
  krui_err result;
  unsigned int *arg1 = (unsigned int *) 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(classDist);
      arg1 = static_cast< unsigned int * >(calloc(sizeof(unsigned int), _rswiglen));
      for (_rswigi=0; _rswigi< _rswiglen; _rswigi++) {
        arg1[_rswigi] = INTEGER(classDist)[_rswigi];
      }
    }
  }
  result = (krui_err)krui_setClassDistribution(arg1);
  r_ans = Rf_ScalarInteger(result);
  
  //free(arg1);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_krui_setClassInfo ( SEXP name, SEXP s_swig_copy)
{
  krui_err result;
  char *arg1 = (char *) 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  arg1 = reinterpret_cast< char * >(SWIG_strdup(CHAR(STRING_ELT(name, 0))));
  result = (krui_err)krui_setClassInfo(arg1);
  r_ans = Rf_ScalarInteger(result);
  free(arg1);
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_krui_useClassDistribution ( SEXP use_it, SEXP s_swig_copy)
{
  krui_err result;
  bool arg1 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  arg1 = LOGICAL(use_it)[0] ? TRUE : FALSE;
  result = (krui_err)krui_useClassDistribution(arg1);
  r_ans = Rf_ScalarInteger(result);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_krui_getPrunFunc ( )
{
  char *result = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  result = (char *)krui_getPrunFunc();
  r_ans = result ? Rf_mkString(reinterpret_cast< char * >(result)) : R_NilValue;
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_krui_getFFLearnFunc ( )
{
  char *result = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  result = (char *)krui_getFFLearnFunc();
  r_ans = result ? Rf_mkString(reinterpret_cast< char * >(result)) : R_NilValue;
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_krui_setFFLearnFunc ( SEXP FF_learning_func, SEXP s_swig_copy)
{
  krui_err result;
  char *arg1 = (char *) 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  arg1 = reinterpret_cast< char * >(SWIG_strdup(CHAR(STRING_ELT(FF_learning_func, 0))));
  result = (krui_err)krui_setFFLearnFunc(arg1);
  r_ans = Rf_ScalarInteger(result);
  free(arg1);
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_krui_setPrunFunc ( SEXP pruning_func, SEXP s_swig_copy)
{
  krui_err result;
  char *arg1 = (char *) 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  arg1 = reinterpret_cast< char * >(SWIG_strdup(CHAR(STRING_ELT(pruning_func, 0))));
  result = (krui_err)krui_setPrunFunc(arg1);
  r_ans = Rf_ScalarInteger(result);
  free(arg1);
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_krui_showPattern ( SEXP mode, SEXP s_swig_copy)
{
  krui_err result;
  int arg1 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  arg1 = static_cast< int >(INTEGER(mode)[0]);
  result = (krui_err)krui_showPattern(arg1);
  r_ans = Rf_ScalarInteger(result);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_krui_allocNewPatternSet ( SEXP s_swig_copy)
{
  krui_err result;
  int *arg1 = (int *) 0 ;
  int temp1 ;
  int res1 = SWIG_TMPOBJ ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  SEXP R_OutputValues;
  
  arg1 = &temp1;
  result = (krui_err)krui_allocNewPatternSet(arg1);
  r_ans = Rf_ScalarInteger(result);
  Rf_protect(r_ans);
  Rf_protect(R_OutputValues = Rf_allocVector(VECSXP,2));
  r_nprotect += 2;
  SET_VECTOR_ELT(R_OutputValues, 0, r_ans);
  r_ans = R_OutputValues;
  if (SWIG_IsTmpObj(res1)) {
    SET_VECTOR_ELT(r_ans, 1, SWIG_From_int((*arg1)));
  } else {
    int new_flags = SWIG_IsNewObj(res1) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    SET_VECTOR_ELT(r_ans, 1, SWIG_R_NewPointerObj((void*)(arg1), SWIGTYPE_p_int, new_flags));
  }
  
  //free(arg1);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_krui_newPattern ( SEXP s_swig_copy)
{
  krui_err result;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  result = (krui_err)krui_newPattern();
  r_ans = Rf_ScalarInteger(result);
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_krui_setPatternNo ( SEXP pattern_no, SEXP s_swig_copy)
{
  krui_err result;
  int arg1 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  arg1 = static_cast< int >(INTEGER(pattern_no)[0]);
  result = (krui_err)krui_setPatternNo(arg1);
  r_ans = Rf_ScalarInteger(result);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_krui_getPatternNo ( SEXP s_swig_copy)
{
  krui_err result;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  result = (krui_err)krui_getPatternNo();
  r_ans = Rf_ScalarInteger(result);
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_krui_deletePattern ( SEXP s_swig_copy)
{
  krui_err result;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  result = (krui_err)krui_deletePattern();
  r_ans = Rf_ScalarInteger(result);
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_krui_modifyPattern ( SEXP s_swig_copy)
{
  krui_err result;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  result = (krui_err)krui_modifyPattern();
  r_ans = Rf_ScalarInteger(result);
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_krui_deleteAllPatterns ( )
{
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  krui_deleteAllPatterns();
  r_ans = R_NilValue;
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_krui_shufflePatterns ( SEXP on_or_off, SEXP s_swig_copy)
{
  krui_err result;
  bool arg1 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  arg1 = LOGICAL(on_or_off)[0] ? TRUE : FALSE;
  result = (krui_err)krui_shufflePatterns(arg1);
  r_ans = Rf_ScalarInteger(result);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_krui_shuffleSubPatterns ( SEXP on_or_off, SEXP s_swig_copy)
{
  krui_err result;
  bool arg1 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  arg1 = LOGICAL(on_or_off)[0] ? TRUE : FALSE;
  result = (krui_err)krui_shuffleSubPatterns(arg1);
  r_ans = Rf_ScalarInteger(result);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_krui_getNoOfPatterns ( SEXP s_swig_copy)
{
  int result;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  result = (int)krui_getNoOfPatterns();
  r_ans = Rf_ScalarInteger(result);
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_krui_getTotalNoOfSubPatterns ( SEXP s_swig_copy)
{
  int result;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  result = (int)krui_getTotalNoOfSubPatterns();
  r_ans = Rf_ScalarInteger(result);
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_krui_loadNewPatterns ( SEXP filename, SEXP number, SEXP s_swig_copy)
{
  krui_err result;
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  arg1 = reinterpret_cast< char * >(SWIG_strdup(CHAR(STRING_ELT(filename, 0))));
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(number);
      arg2 = static_cast< int * >(calloc(sizeof(int), _rswiglen));
      for (_rswigi=0; _rswigi< _rswiglen; _rswigi++) {
        arg2[_rswigi] = INTEGER(number)[_rswigi];
      }
    }
  }
  result = (krui_err)krui_loadNewPatterns(arg1,arg2);
  r_ans = Rf_ScalarInteger(result);
  free(arg1);
  
  //free(arg2);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_krui_setCurrPatSet ( SEXP number, SEXP s_swig_copy)
{
  krui_err result;
  int arg1 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  arg1 = static_cast< int >(INTEGER(number)[0]);
  result = (krui_err)krui_setCurrPatSet(arg1);
  r_ans = Rf_ScalarInteger(result);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_krui_saveNewPatterns ( SEXP filename, SEXP number, SEXP s_swig_copy)
{
  krui_err result;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  arg1 = reinterpret_cast< char * >(SWIG_strdup(CHAR(STRING_ELT(filename, 0))));
  arg2 = static_cast< int >(INTEGER(number)[0]);
  result = (krui_err)krui_saveNewPatterns(arg1,arg2);
  r_ans = Rf_ScalarInteger(result);
  free(arg1);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_krui_deletePatSet ( SEXP number, SEXP s_swig_copy)
{
  krui_err result;
  int arg1 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  arg1 = static_cast< int >(INTEGER(number)[0]);
  result = (krui_err)krui_deletePatSet(arg1);
  r_ans = Rf_ScalarInteger(result);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_krui_GetPatInfo ( SEXP set_info, SEXP pat_info, SEXP s_swig_copy)
{
  krui_err result;
  pattern_set_info *arg1 = (pattern_set_info *) 0 ;
  pattern_descriptor *arg2 = (pattern_descriptor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(set_info, &argp1, SWIGTYPE_p_pattern_set_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "krui_GetPatInfo" "', argument " "1"" of type '" "pattern_set_info *""'"); 
  }
  arg1 = reinterpret_cast< pattern_set_info * >(argp1);
  res2 = SWIG_R_ConvertPtr(pat_info, &argp2, SWIGTYPE_p_pattern_descriptor, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "krui_GetPatInfo" "', argument " "2"" of type '" "pattern_descriptor *""'"); 
  }
  arg2 = reinterpret_cast< pattern_descriptor * >(argp2);
  result = (krui_err)krui_GetPatInfo(arg1,arg2);
  r_ans = Rf_ScalarInteger(result);
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_krui_DefShowSubPat ( SEXP inpos, SEXP outpos, SEXP s_swig_copy)
{
  krui_err result;
  int *arg1 = (int *) 0 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  int temp1 ;
  int res1 = SWIG_TMPOBJ ;
  int temp2 ;
  int res2 = SWIG_TMPOBJ ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  SEXP R_OutputValues;
  
  arg1 = &temp1;
  arg2 = &temp2;
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(inpos);
      arg3 = static_cast< int * >(calloc(sizeof(int), _rswiglen));
      for (_rswigi=0; _rswigi< _rswiglen; _rswigi++) {
        arg3[_rswigi] = INTEGER(inpos)[_rswigi];
      }
    }
  }
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(outpos);
      arg4 = static_cast< int * >(calloc(sizeof(int), _rswiglen));
      for (_rswigi=0; _rswigi< _rswiglen; _rswigi++) {
        arg4[_rswigi] = INTEGER(outpos)[_rswigi];
      }
    }
  }
  result = (krui_err)krui_DefShowSubPat(arg1,arg2,arg3,arg4);
  r_ans = Rf_ScalarInteger(result);
  Rf_protect(r_ans);
  Rf_protect(R_OutputValues = Rf_allocVector(VECSXP,3));
  r_nprotect += 2;
  SET_VECTOR_ELT(R_OutputValues, 0, r_ans);
  r_ans = R_OutputValues;
  if (SWIG_IsTmpObj(res1)) {
    SET_VECTOR_ELT(r_ans, 1, SWIG_From_int((*arg1)));
  } else {
    int new_flags = SWIG_IsNewObj(res1) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    SET_VECTOR_ELT(r_ans, 1, SWIG_R_NewPointerObj((void*)(arg1), SWIGTYPE_p_int, new_flags));
  }
  if (SWIG_IsTmpObj(res2)) {
    SET_VECTOR_ELT(r_ans, 2, SWIG_From_int((*arg2)));
  } else {
    int new_flags = SWIG_IsNewObj(res2) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    SET_VECTOR_ELT(r_ans, 2, SWIG_R_NewPointerObj((void*)(arg2), SWIGTYPE_p_int, new_flags));
  }
  
  //free(arg1);
  
  
  //free(arg2);
  
  
  //free(arg3);
  
  
  //free(arg4);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_krui_DefTrainSubPat ( SEXP s_swig_copy)
{
  krui_err result;
  int *arg1 = (int *) 0 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  int *arg5 = (int *) 0 ;
  int temp1 ;
  int res1 = SWIG_TMPOBJ ;
  int temp2 ;
  int res2 = SWIG_TMPOBJ ;
  int temp3 ;
  int res3 = SWIG_TMPOBJ ;
  int temp4 ;
  int res4 = SWIG_TMPOBJ ;
  int temp5 ;
  int res5 = SWIG_TMPOBJ ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  SEXP R_OutputValues;
  
  arg1 = &temp1;
  arg2 = &temp2;
  arg3 = &temp3;
  arg4 = &temp4;
  arg5 = &temp5;
  result = (krui_err)krui_DefTrainSubPat(arg1,arg2,arg3,arg4,arg5);
  r_ans = Rf_ScalarInteger(result);
  Rf_protect(r_ans);
  Rf_protect(R_OutputValues = Rf_allocVector(VECSXP,6));
  r_nprotect += 2;
  SET_VECTOR_ELT(R_OutputValues, 0, r_ans);
  r_ans = R_OutputValues;
  if (SWIG_IsTmpObj(res1)) {
    SET_VECTOR_ELT(r_ans, 1, SWIG_From_int((*arg1)));
  } else {
    int new_flags = SWIG_IsNewObj(res1) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    SET_VECTOR_ELT(r_ans, 1, SWIG_R_NewPointerObj((void*)(arg1), SWIGTYPE_p_int, new_flags));
  }
  if (SWIG_IsTmpObj(res2)) {
    SET_VECTOR_ELT(r_ans, 2, SWIG_From_int((*arg2)));
  } else {
    int new_flags = SWIG_IsNewObj(res2) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    SET_VECTOR_ELT(r_ans, 2, SWIG_R_NewPointerObj((void*)(arg2), SWIGTYPE_p_int, new_flags));
  }
  if (SWIG_IsTmpObj(res3)) {
    SET_VECTOR_ELT(r_ans, 3, SWIG_From_int((*arg3)));
  } else {
    int new_flags = SWIG_IsNewObj(res3) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    SET_VECTOR_ELT(r_ans, 3, SWIG_R_NewPointerObj((void*)(arg3), SWIGTYPE_p_int, new_flags));
  }
  if (SWIG_IsTmpObj(res4)) {
    SET_VECTOR_ELT(r_ans, 4, SWIG_From_int((*arg4)));
  } else {
    int new_flags = SWIG_IsNewObj(res4) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    SET_VECTOR_ELT(r_ans, 4, SWIG_R_NewPointerObj((void*)(arg4), SWIGTYPE_p_int, new_flags));
  }
  if (SWIG_IsTmpObj(res5)) {
    SET_VECTOR_ELT(r_ans, 5, SWIG_From_int((*arg5)));
  } else {
    int new_flags = SWIG_IsNewObj(res5) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    SET_VECTOR_ELT(r_ans, 5, SWIG_R_NewPointerObj((void*)(arg5), SWIGTYPE_p_int, new_flags));
  }
  
  //free(arg1);
  
  
  //free(arg2);
  
  
  //free(arg3);
  
  
  //free(arg4);
  
  
  //free(arg5);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_krui_AlignSubPat ( SEXP inpos, SEXP outpos, SEXP no, SEXP s_swig_copy)
{
  krui_err result;
  int *arg1 = (int *) 0 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(inpos);
      arg1 = static_cast< int * >(calloc(sizeof(int), _rswiglen));
      for (_rswigi=0; _rswigi< _rswiglen; _rswigi++) {
        arg1[_rswigi] = INTEGER(inpos)[_rswigi];
      }
    }
  }
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(outpos);
      arg2 = static_cast< int * >(calloc(sizeof(int), _rswiglen));
      for (_rswigi=0; _rswigi< _rswiglen; _rswigi++) {
        arg2[_rswigi] = INTEGER(outpos)[_rswigi];
      }
    }
  }
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(no);
      arg3 = static_cast< int * >(calloc(sizeof(int), _rswiglen));
      for (_rswigi=0; _rswigi< _rswiglen; _rswigi++) {
        arg3[_rswigi] = INTEGER(no)[_rswigi];
      }
    }
  }
  result = (krui_err)krui_AlignSubPat(arg1,arg2,arg3);
  r_ans = Rf_ScalarInteger(result);
  
  //free(arg1);
  
  
  //free(arg2);
  
  
  //free(arg3);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_krui_GetShapeOfSubPattern ( SEXP inpos, SEXP outpos, SEXP n_pos, SEXP s_swig_copy)
{
  krui_err result;
  int *arg1 = (int *) 0 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  int arg5 ;
  int temp1 ;
  int res1 = SWIG_TMPOBJ ;
  int temp2 ;
  int res2 = SWIG_TMPOBJ ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  SEXP R_OutputValues;
  
  arg1 = &temp1;
  arg2 = &temp2;
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(inpos);
      arg3 = static_cast< int * >(calloc(sizeof(int), _rswiglen));
      for (_rswigi=0; _rswigi< _rswiglen; _rswigi++) {
        arg3[_rswigi] = INTEGER(inpos)[_rswigi];
      }
    }
  }
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(outpos);
      arg4 = static_cast< int * >(calloc(sizeof(int), _rswiglen));
      for (_rswigi=0; _rswigi< _rswiglen; _rswigi++) {
        arg4[_rswigi] = INTEGER(outpos)[_rswigi];
      }
    }
  }
  arg5 = static_cast< int >(INTEGER(n_pos)[0]);
  result = (krui_err)krui_GetShapeOfSubPattern(arg1,arg2,arg3,arg4,arg5);
  r_ans = Rf_ScalarInteger(result);
  Rf_protect(r_ans);
  Rf_protect(R_OutputValues = Rf_allocVector(VECSXP,3));
  r_nprotect += 2;
  SET_VECTOR_ELT(R_OutputValues, 0, r_ans);
  r_ans = R_OutputValues;
  if (SWIG_IsTmpObj(res1)) {
    SET_VECTOR_ELT(r_ans, 1, SWIG_From_int((*arg1)));
  } else {
    int new_flags = SWIG_IsNewObj(res1) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    SET_VECTOR_ELT(r_ans, 1, SWIG_R_NewPointerObj((void*)(arg1), SWIGTYPE_p_int, new_flags));
  }
  if (SWIG_IsTmpObj(res2)) {
    SET_VECTOR_ELT(r_ans, 2, SWIG_From_int((*arg2)));
  } else {
    int new_flags = SWIG_IsNewObj(res2) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    SET_VECTOR_ELT(r_ans, 2, SWIG_R_NewPointerObj((void*)(arg2), SWIGTYPE_p_int, new_flags));
  }
  
  //free(arg1);
  
  
  //free(arg2);
  
  
  //free(arg3);
  
  
  //free(arg4);
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_krui_saveNet ( SEXP filename, SEXP netname, SEXP s_swig_copy)
{
  krui_err result;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  arg1 = reinterpret_cast< char * >(SWIG_strdup(CHAR(STRING_ELT(filename, 0))));
  arg2 = reinterpret_cast< char * >(SWIG_strdup(CHAR(STRING_ELT(netname, 0))));
  result = (krui_err)krui_saveNet(arg1,arg2);
  r_ans = Rf_ScalarInteger(result);
  free(arg1);
  free(arg2);
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_krui_loadNet ( SEXP filename, SEXP netname, SEXP s_swig_copy)
{
  krui_err result;
  char *arg1 = (char *) 0 ;
  char **arg2 = (char **) 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  arg1 = reinterpret_cast< char * >(SWIG_strdup(CHAR(STRING_ELT(filename, 0))));
  res2 = SWIG_R_ConvertPtr(netname, &argp2, SWIGTYPE_p_p_char, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "krui_loadNet" "', argument " "2"" of type '" "char **""'"); 
  }
  arg2 = reinterpret_cast< char ** >(argp2);
  result = (krui_err)krui_loadNet(arg1,arg2);
  r_ans = Rf_ScalarInteger(result);
  free(arg1);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_krui_saveResultParam ( SEXP filename, SEXP create, SEXP startpattern, SEXP endpattern, SEXP includeinput, SEXP includeoutput, SEXP Update_param_array, SEXP NoOfUpdateParam, SEXP s_swig_copy)
{
  krui_err result;
  char *arg1 = (char *) 0 ;
  bool arg2 ;
  int arg3 ;
  int arg4 ;
  bool arg5 ;
  bool arg6 ;
  float *arg7 = (float *) 0 ;
  int arg8 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  arg1 = reinterpret_cast< char * >(SWIG_strdup(CHAR(STRING_ELT(filename, 0))));
  arg2 = LOGICAL(create)[0] ? TRUE : FALSE;
  arg3 = static_cast< int >(INTEGER(startpattern)[0]);
  arg4 = static_cast< int >(INTEGER(endpattern)[0]);
  arg5 = LOGICAL(includeinput)[0] ? TRUE : FALSE;
  arg6 = LOGICAL(includeoutput)[0] ? TRUE : FALSE;
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(Update_param_array);
      arg7 = static_cast< float * >(calloc(sizeof(float), _rswiglen));
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        arg7[_rswigi] = REAL(Update_param_array)[_rswigi];
      }
    }
  }
  arg8 = static_cast< int >(INTEGER(NoOfUpdateParam)[0]);
  result = (krui_err)krui_saveResultParam(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  r_ans = Rf_ScalarInteger(result);
  free(arg1);
  
  
  
  
  
  
  //free(arg7);
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_krui_allocateUnits ( SEXP no_of_units, SEXP s_swig_copy)
{
  krui_err result;
  int arg1 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  arg1 = static_cast< int >(INTEGER(no_of_units)[0]);
  result = (krui_err)krui_allocateUnits(arg1);
  r_ans = Rf_ScalarInteger(result);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_krui_deleteNet ( )
{
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  krui_deleteNet();
  r_ans = R_NilValue;
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_krui_getFirstSymbolTableEntry ( SEXP symbol_name, SEXP symbol_type, SEXP s_swig_copy)
{
  bool result;
  char **arg1 = (char **) 0 ;
  int *arg2 = (int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(symbol_name, &argp1, SWIGTYPE_p_p_char, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "krui_getFirstSymbolTableEntry" "', argument " "1"" of type '" "char **""'"); 
  }
  arg1 = reinterpret_cast< char ** >(argp1);
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(symbol_type);
      arg2 = static_cast< int * >(calloc(sizeof(int), _rswiglen));
      for (_rswigi=0; _rswigi< _rswiglen; _rswigi++) {
        arg2[_rswigi] = INTEGER(symbol_type)[_rswigi];
      }
    }
  }
  result = (bool)krui_getFirstSymbolTableEntry(arg1,arg2);
  r_ans = Rf_ScalarLogical(result);
  
  
  //free(arg2);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_krui_getNextSymbolTableEntry ( SEXP symbol_name, SEXP symbol_type, SEXP s_swig_copy)
{
  bool result;
  char **arg1 = (char **) 0 ;
  int *arg2 = (int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(symbol_name, &argp1, SWIGTYPE_p_p_char, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "krui_getNextSymbolTableEntry" "', argument " "1"" of type '" "char **""'"); 
  }
  arg1 = reinterpret_cast< char ** >(argp1);
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(symbol_type);
      arg2 = static_cast< int * >(calloc(sizeof(int), _rswiglen));
      for (_rswigi=0; _rswigi< _rswiglen; _rswigi++) {
        arg2[_rswigi] = INTEGER(symbol_type)[_rswigi];
      }
    }
  }
  result = (bool)krui_getNextSymbolTableEntry(arg1,arg2);
  r_ans = Rf_ScalarLogical(result);
  
  
  //free(arg2);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_krui_symbolSearch ( SEXP symbol, SEXP symbol_type, SEXP s_swig_copy)
{
  bool result;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  arg1 = reinterpret_cast< char * >(SWIG_strdup(CHAR(STRING_ELT(symbol, 0))));
  arg2 = static_cast< int >(INTEGER(symbol_type)[0]);
  result = (bool)krui_symbolSearch(arg1,arg2);
  r_ans = Rf_ScalarLogical(result);
  free(arg1);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_krui_getVersion ( )
{
  char *result = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  result = (char *)krui_getVersion();
  r_ans = result ? Rf_mkString(reinterpret_cast< char * >(result)) : R_NilValue;
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_krui_getNetInfo ( SEXP no_of_sites, SEXP no_of_links, SEXP no_of_STable_entries, SEXP no_of_FTable_entries)
{
  int *arg1 = (int *) 0 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(no_of_sites);
      arg1 = static_cast< int * >(calloc(sizeof(int), _rswiglen));
      for (_rswigi=0; _rswigi< _rswiglen; _rswigi++) {
        arg1[_rswigi] = INTEGER(no_of_sites)[_rswigi];
      }
    }
  }
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(no_of_links);
      arg2 = static_cast< int * >(calloc(sizeof(int), _rswiglen));
      for (_rswigi=0; _rswigi< _rswiglen; _rswigi++) {
        arg2[_rswigi] = INTEGER(no_of_links)[_rswigi];
      }
    }
  }
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(no_of_STable_entries);
      arg3 = static_cast< int * >(calloc(sizeof(int), _rswiglen));
      for (_rswigi=0; _rswigi< _rswiglen; _rswigi++) {
        arg3[_rswigi] = INTEGER(no_of_STable_entries)[_rswigi];
      }
    }
  }
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(no_of_FTable_entries);
      arg4 = static_cast< int * >(calloc(sizeof(int), _rswiglen));
      for (_rswigi=0; _rswigi< _rswiglen; _rswigi++) {
        arg4[_rswigi] = INTEGER(no_of_FTable_entries)[_rswigi];
      }
    }
  }
  krui_getNetInfo(arg1,arg2,arg3,arg4);
  r_ans = R_NilValue;
  
  //free(arg1);
  
  
  //free(arg2);
  
  
  //free(arg3);
  
  
  //free(arg4);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_krui_getMemoryManagerInfo ( SEXP unit_bytes, SEXP site_bytes, SEXP link_bytes, SEXP NTable_bytes, SEXP STable_bytes, SEXP FTable_bytes)
{
  int *arg1 = (int *) 0 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  int *arg5 = (int *) 0 ;
  int *arg6 = (int *) 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(unit_bytes);
      arg1 = static_cast< int * >(calloc(sizeof(int), _rswiglen));
      for (_rswigi=0; _rswigi< _rswiglen; _rswigi++) {
        arg1[_rswigi] = INTEGER(unit_bytes)[_rswigi];
      }
    }
  }
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(site_bytes);
      arg2 = static_cast< int * >(calloc(sizeof(int), _rswiglen));
      for (_rswigi=0; _rswigi< _rswiglen; _rswigi++) {
        arg2[_rswigi] = INTEGER(site_bytes)[_rswigi];
      }
    }
  }
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(link_bytes);
      arg3 = static_cast< int * >(calloc(sizeof(int), _rswiglen));
      for (_rswigi=0; _rswigi< _rswiglen; _rswigi++) {
        arg3[_rswigi] = INTEGER(link_bytes)[_rswigi];
      }
    }
  }
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(NTable_bytes);
      arg4 = static_cast< int * >(calloc(sizeof(int), _rswiglen));
      for (_rswigi=0; _rswigi< _rswiglen; _rswigi++) {
        arg4[_rswigi] = INTEGER(NTable_bytes)[_rswigi];
      }
    }
  }
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(STable_bytes);
      arg5 = static_cast< int * >(calloc(sizeof(int), _rswiglen));
      for (_rswigi=0; _rswigi< _rswiglen; _rswigi++) {
        arg5[_rswigi] = INTEGER(STable_bytes)[_rswigi];
      }
    }
  }
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(FTable_bytes);
      arg6 = static_cast< int * >(calloc(sizeof(int), _rswiglen));
      for (_rswigi=0; _rswigi< _rswiglen; _rswigi++) {
        arg6[_rswigi] = INTEGER(FTable_bytes)[_rswigi];
      }
    }
  }
  krui_getMemoryManagerInfo(arg1,arg2,arg3,arg4,arg5,arg6);
  r_ans = R_NilValue;
  
  //free(arg1);
  
  
  //free(arg2);
  
  
  //free(arg3);
  
  
  //free(arg4);
  
  
  //free(arg5);
  
  
  //free(arg6);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_krui_getUnitDefaults ( SEXP act, SEXP bias, SEXP st, SEXP subnet_no, SEXP layer_no, SEXP act_func, SEXP out_func)
{
  FlintType *arg1 = (FlintType *) 0 ;
  FlintType *arg2 = (FlintType *) 0 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  int *arg5 = (int *) 0 ;
  char **arg6 = (char **) 0 ;
  char **arg7 = (char **) 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(act);
      arg1 = static_cast< FlintType * >(calloc(sizeof(FlintType), _rswiglen));
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        arg1[_rswigi] = REAL(act)[_rswigi];
      }
    }
  }
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(bias);
      arg2 = static_cast< FlintType * >(calloc(sizeof(FlintType), _rswiglen));
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        arg2[_rswigi] = REAL(bias)[_rswigi];
      }
    }
  }
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(st);
      arg3 = static_cast< int * >(calloc(sizeof(int), _rswiglen));
      for (_rswigi=0; _rswigi< _rswiglen; _rswigi++) {
        arg3[_rswigi] = INTEGER(st)[_rswigi];
      }
    }
  }
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(subnet_no);
      arg4 = static_cast< int * >(calloc(sizeof(int), _rswiglen));
      for (_rswigi=0; _rswigi< _rswiglen; _rswigi++) {
        arg4[_rswigi] = INTEGER(subnet_no)[_rswigi];
      }
    }
  }
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(layer_no);
      arg5 = static_cast< int * >(calloc(sizeof(int), _rswiglen));
      for (_rswigi=0; _rswigi< _rswiglen; _rswigi++) {
        arg5[_rswigi] = INTEGER(layer_no)[_rswigi];
      }
    }
  }
  res6 = SWIG_R_ConvertPtr(act_func, &argp6, SWIGTYPE_p_p_char, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "krui_getUnitDefaults" "', argument " "6"" of type '" "char **""'"); 
  }
  arg6 = reinterpret_cast< char ** >(argp6);
  res7 = SWIG_R_ConvertPtr(out_func, &argp7, SWIGTYPE_p_p_char, 0 |  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "krui_getUnitDefaults" "', argument " "7"" of type '" "char **""'"); 
  }
  arg7 = reinterpret_cast< char ** >(argp7);
  krui_getUnitDefaults(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  r_ans = R_NilValue;
  
  //free(arg1);
  
  
  //free(arg2);
  
  
  //free(arg3);
  
  
  //free(arg4);
  
  
  //free(arg5);
  
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_krui_setUnitDefaults ( SEXP act, SEXP bias, SEXP st, SEXP subnet_no, SEXP layer_no, SEXP act_func, SEXP out_func, SEXP s_swig_copy)
{
  krui_err result;
  FlintTypeParam arg1 ;
  FlintTypeParam arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  arg1 = static_cast< FlintTypeParam >(REAL(act)[0]);
  arg2 = static_cast< FlintTypeParam >(REAL(bias)[0]);
  arg3 = static_cast< int >(INTEGER(st)[0]);
  arg4 = static_cast< int >(INTEGER(subnet_no)[0]);
  arg5 = static_cast< int >(INTEGER(layer_no)[0]);
  arg6 = reinterpret_cast< char * >(SWIG_strdup(CHAR(STRING_ELT(act_func, 0))));
  arg7 = reinterpret_cast< char * >(SWIG_strdup(CHAR(STRING_ELT(out_func, 0))));
  result = (krui_err)krui_setUnitDefaults(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  r_ans = Rf_ScalarInteger(result);
  
  
  
  
  
  free(arg6);
  free(arg7);
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_krui_resetNet ( )
{
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  krui_resetNet();
  r_ans = R_NilValue;
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_krui_setSeedNo ( SEXP seed)
{
  long arg1 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  arg1 = static_cast< long >(INTEGER(seed)[0]);
  krui_setSeedNo(arg1);
  r_ans = R_NilValue;
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_krui_getNoOfInputUnits ( SEXP s_swig_copy)
{
  int result;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  result = (int)krui_getNoOfInputUnits();
  r_ans = Rf_ScalarInteger(result);
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_krui_getNoOfOutputUnits ( SEXP s_swig_copy)
{
  int result;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  result = (int)krui_getNoOfOutputUnits();
  r_ans = Rf_ScalarInteger(result);
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_krui_getNoOfTTypeUnits ( SEXP UnitTType, SEXP s_swig_copy)
{
  int result;
  int arg1 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  arg1 = static_cast< int >(INTEGER(UnitTType)[0]);
  result = (int)krui_getNoOfTTypeUnits(arg1);
  r_ans = Rf_ScalarInteger(result);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_krui_getNoOfSpecialInputUnits ( SEXP s_swig_copy)
{
  int result;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  result = (int)krui_getNoOfSpecialInputUnits();
  r_ans = Rf_ScalarInteger(result);
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_krui_getNoOfSpecialOutputUnits ( SEXP s_swig_copy)
{
  int result;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  result = (int)krui_getNoOfSpecialOutputUnits();
  r_ans = Rf_ScalarInteger(result);
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_krui_xyTransTable ( SEXP op, SEXP x, SEXP y, SEXP z, SEXP s_swig_copy)
{
  krui_err result;
  int arg1 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  int arg4 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  arg1 = static_cast< int >(INTEGER(op)[0]);
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(x);
      arg2 = static_cast< int * >(calloc(sizeof(int), _rswiglen));
      for (_rswigi=0; _rswigi< _rswiglen; _rswigi++) {
        arg2[_rswigi] = INTEGER(x)[_rswigi];
      }
    }
  }
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(y);
      arg3 = static_cast< int * >(calloc(sizeof(int), _rswiglen));
      for (_rswigi=0; _rswigi< _rswiglen; _rswigi++) {
        arg3[_rswigi] = INTEGER(y)[_rswigi];
      }
    }
  }
  arg4 = static_cast< int >(INTEGER(z)[0]);
  result = (krui_err)krui_xyTransTable(arg1,arg2,arg3,arg4);
  r_ans = Rf_ScalarInteger(result);
  
  
  //free(arg2);
  
  
  //free(arg3);
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_krui_getUnitCenters ( SEXP unit_no, SEXP center_no, SEXP unit_center, SEXP s_swig_copy)
{
  krui_err result;
  int arg1 ;
  int arg2 ;
  PositionVector **arg3 = (PositionVector **) 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  arg1 = static_cast< int >(INTEGER(unit_no)[0]);
  arg2 = static_cast< int >(INTEGER(center_no)[0]);
  res3 = SWIG_R_ConvertPtr(unit_center, &argp3, SWIGTYPE_p_p_PositionVector, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "krui_getUnitCenters" "', argument " "3"" of type '" "PositionVector **""'"); 
  }
  arg3 = reinterpret_cast< PositionVector ** >(argp3);
  result = (krui_err)krui_getUnitCenters(arg1,arg2,arg3);
  r_ans = Rf_ScalarInteger(result);
  
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_krui_setUnitCenters ( SEXP unit_no, SEXP center_no, SEXP unit_center, SEXP s_swig_copy)
{
  krui_err result;
  int arg1 ;
  int arg2 ;
  PositionVector *arg3 = (PositionVector *) 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  arg1 = static_cast< int >(INTEGER(unit_no)[0]);
  arg2 = static_cast< int >(INTEGER(center_no)[0]);
  res3 = SWIG_R_ConvertPtr(unit_center, &argp3, SWIGTYPE_p_PositionVector, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "krui_setUnitCenters" "', argument " "3"" of type '" "PositionVector *""'"); 
  }
  arg3 = reinterpret_cast< PositionVector * >(argp3);
  result = (krui_err)krui_setUnitCenters(arg1,arg2,arg3);
  r_ans = Rf_ScalarInteger(result);
  
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_krui_error ( SEXP error_code)
{
  char *result = 0 ;
  int arg1 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  arg1 = static_cast< int >(INTEGER(error_code)[0]);
  result = (char *)krui_error(arg1);
  r_ans = result ? Rf_mkString(reinterpret_cast< char * >(result)) : R_NilValue;
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_krui_NA_Error ( SEXP currentPattern, SEXP error_unit, SEXP error, SEXP ave, SEXP s_swig_copy)
{
  float result;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  bool arg4 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  arg1 = static_cast< int >(INTEGER(currentPattern)[0]);
  arg2 = static_cast< int >(INTEGER(error_unit)[0]);
  arg3 = static_cast< int >(INTEGER(error)[0]);
  arg4 = LOGICAL(ave)[0] ? TRUE : FALSE;
  result = (float)krui_NA_Error(arg1,arg2,arg3,arg4);
  r_ans = SWIG_From_float(static_cast< float >(result));
  
  
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_krui_getVariance ( SEXP s_swig_copy)
{
  float result;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  result = (float)krui_getVariance();
  r_ans = SWIG_From_float(static_cast< float >(result));
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_krui_setSpecialNetworkType ( SEXP net_type, SEXP s_swig_copy)
{
  krui_err result;
  int arg1 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  arg1 = static_cast< int >(INTEGER(net_type)[0]);
  result = (krui_err)krui_setSpecialNetworkType(arg1);
  r_ans = Rf_ScalarInteger(result);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_krui_getSpecialNetworkType ( SEXP s_swig_copy)
{
  int result;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  result = (int)krui_getSpecialNetworkType();
  r_ans = Rf_ScalarInteger(result);
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_krui_initInversion ( SEXP s_swig_copy)
{
  int result;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  result = (int)krui_initInversion();
  r_ans = Rf_ScalarInteger(result);
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_krui_inv_forwardPass ( SEXP inputs)
{
  UnitList *arg1 = (UnitList *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(inputs, &argp1, SWIGTYPE_p_UnitList, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "krui_inv_forwardPass" "', argument " "1"" of type '" "UnitList *""'"); 
  }
  arg1 = reinterpret_cast< UnitList * >(argp1);
  krui_inv_forwardPass(arg1);
  r_ans = R_NilValue;
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_krui_inv_backwardPass ( SEXP learn, SEXP delta_max, SEXP err_units, SEXP ratio, SEXP inputs, SEXP outputs, SEXP s_swig_copy)
{
  double result;
  float arg1 ;
  float arg2 ;
  int *arg3 = (int *) 0 ;
  float arg4 ;
  UnitList *arg5 = (UnitList *) 0 ;
  UnitList *arg6 = (UnitList *) 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  arg1 = static_cast< float >(REAL(learn)[0]);
  arg2 = static_cast< float >(REAL(delta_max)[0]);
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(err_units);
      arg3 = static_cast< int * >(calloc(sizeof(int), _rswiglen));
      for (_rswigi=0; _rswigi< _rswiglen; _rswigi++) {
        arg3[_rswigi] = INTEGER(err_units)[_rswigi];
      }
    }
  }
  arg4 = static_cast< float >(REAL(ratio)[0]);
  res5 = SWIG_R_ConvertPtr(inputs, &argp5, SWIGTYPE_p_UnitList, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "krui_inv_backwardPass" "', argument " "5"" of type '" "UnitList *""'"); 
  }
  arg5 = reinterpret_cast< UnitList * >(argp5);
  res6 = SWIG_R_ConvertPtr(outputs, &argp6, SWIGTYPE_p_UnitList, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "krui_inv_backwardPass" "', argument " "6"" of type '" "UnitList *""'"); 
  }
  arg6 = reinterpret_cast< UnitList * >(argp6);
  result = (double)krui_inv_backwardPass(arg1,arg2,arg3,arg4,arg5,arg6);
  r_ans = SWIG_From_double(static_cast< double >(result));
  
  
  
  //free(arg3);
  
  
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_krui_kohonen_SetExtraParameter ( SEXP x)
{
  int arg1 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  arg1 = static_cast< int >(INTEGER(x)[0]);
  krui_kohonen_SetExtraParameter(arg1);
  r_ans = R_NilValue;
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_krui_spanning_tree ( )
{
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  krui_spanning_tree();
  r_ans = R_NilValue;
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_krui_cc_updatePosOfSpecialUnits ( )
{
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  krui_cc_updatePosOfSpecialUnits();
  r_ans = R_NilValue;
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_krui_cc_deleteAllSpecialUnits ( SEXP s_swig_copy)
{
  krui_err result;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  result = (krui_err)krui_cc_deleteAllSpecialUnits();
  r_ans = Rf_ScalarInteger(result);
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_krui_getErrorCode ( SEXP s_swig_copy)
{
  int result;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  result = (int)krui_getErrorCode();
  r_ans = Rf_ScalarInteger(result);
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_krui_setErrorHandler ( SEXP error_Handler, SEXP s_swig_copy)
{
  krui_err result;
  void (*arg1)(int) = (void (*)(int)) 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  if(TYPEOF(error_Handler) != CLOSXP) {
    {
      int res = SWIG_R_ConvertPtr(error_Handler, (void**)(&arg1), SWIGTYPE_p_f_int__void, 0);
      if (!SWIG_IsOK(res)) {
        SWIG_exception_fail(SWIG_ArgError(res), "in method '" "krui_setErrorHandler" "', argument " "1"" of type '" "void (*)(int)""'"); 
      }
    }
  } else {
    arg1 = _p_f_int__void;
    R_SWIG_pushCallbackFunctionData(error_Handler, NULL);
  }
  result = (krui_err)krui_setErrorHandler(arg1);
  r_ans = Rf_ScalarInteger(result);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_krui_execHandler ( SEXP error_code)
{
  int arg1 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  arg1 = static_cast< int >(INTEGER(error_code)[0]);
  krui_execHandler(arg1);
  r_ans = R_NilValue;
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_testTrainNeuralNetwork ( SEXP a, SEXP b, SEXP c, SEXP s_swig_copy)
{
  int result;
  int arg1 ;
  int arg2 ;
  int *arg3 = (int *) 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  arg1 = static_cast< int >(INTEGER(a)[0]);
  arg2 = static_cast< int >(INTEGER(b)[0]);
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(c);
      arg3 = static_cast< int * >(calloc(sizeof(int), _rswiglen));
      for (_rswigi=0; _rswigi< _rswiglen; _rswigi++) {
        arg3[_rswigi] = INTEGER(c)[_rswigi];
      }
    }
  }
  result = (int)testTrainNeuralNetwork(arg1,arg2,arg3);
  r_ans = Rf_ScalarInteger(result);
  
  
  
  //free(arg3);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_testTrainNeuralNetworkWrapper ( SEXP s_swig_copy)
{
  int result;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  result = (int)testTrainNeuralNetworkWrapper();
  r_ans = Rf_ScalarInteger(result);
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_getFuncInfoWrapper ( SEXP a, SEXP s_swig_copy)
{
  int result;
  int arg1 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  arg1 = static_cast< int >(INTEGER(a)[0]);
  result = (int)getFuncInfoWrapper(arg1);
  r_ans = Rf_ScalarInteger(result);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_getFuncInfoWrapper2 ( SEXP funcno)
{
  char *result = 0 ;
  int arg1 ;
  int *arg2 = (int *) 0 ;
  int temp2 ;
  int res2 = SWIG_TMPOBJ ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  SEXP R_OutputValues;
  
  arg2 = &temp2;
  arg1 = static_cast< int >(INTEGER(funcno)[0]);
  result = (char *)getFuncInfoWrapper2(arg1,arg2);
  r_ans = result ? Rf_mkString(reinterpret_cast< char * >(result)) : R_NilValue;
  Rf_protect(r_ans);
  Rf_protect(R_OutputValues = Rf_allocVector(VECSXP,2));
  r_nprotect += 2;
  SET_VECTOR_ELT(R_OutputValues, 0, r_ans);
  r_ans = R_OutputValues;
  if (SWIG_IsTmpObj(res2)) {
    SET_VECTOR_ELT(r_ans, 1, SWIG_From_int((*arg2)));
  } else {
    int new_flags = SWIG_IsNewObj(res2) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    SET_VECTOR_ELT(r_ans, 1, SWIG_R_NewPointerObj((void*)(arg2), SWIGTYPE_p_int, new_flags));
  }
  
  
  //free(arg2);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_encoderExample ( )
{
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  encoderExample();
  r_ans = R_NilValue;
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_myBackpropLearnAllPatterns ( SEXP decay, SEXP s_swig_copy)
{
  krui_err result;
  float arg1 ;
  float *arg2 = (float *) 0 ;
  float temp2 ;
  int res2 = SWIG_TMPOBJ ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  SEXP R_OutputValues;
  
  arg2 = &temp2;
  arg1 = static_cast< float >(REAL(decay)[0]);
  result = (krui_err)myBackpropLearnAllPatterns(arg1,arg2);
  r_ans = Rf_ScalarInteger(result);
  Rf_protect(r_ans);
  Rf_protect(R_OutputValues = Rf_allocVector(VECSXP,2));
  r_nprotect += 2;
  SET_VECTOR_ELT(R_OutputValues, 0, r_ans);
  r_ans = R_OutputValues;
  if (SWIG_IsTmpObj(res2)) {
    SET_VECTOR_ELT(r_ans, 1, SWIG_From_float((*arg2)));
  } else {
    int new_flags = SWIG_IsNewObj(res2) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    SET_VECTOR_ELT(r_ans, 1, SWIG_R_NewPointerObj((void*)(arg2), SWIGTYPE_p_float, new_flags));
  }
  
  
  //free(arg2);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_delete_Shape ( SEXP self)
{
  Shape *arg1 = (Shape *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_Shape, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Shape" "', argument " "1"" of type '" "Shape *""'"); 
  }
  arg1 = reinterpret_cast< Shape * >(argp1);
  delete arg1;
  r_ans = R_NilValue;
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  R_ClearExternalPtr(self);
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_Shape_x_set ( SEXP self, SEXP s_x)
{
  Shape *arg1 = (Shape *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_Shape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Shape_x_set" "', argument " "1"" of type '" "Shape *""'"); 
  }
  arg1 = reinterpret_cast< Shape * >(argp1);
  arg2 = static_cast< double >(REAL(s_x)[0]);
  if (arg1) (arg1)->x = arg2;
  r_ans = R_NilValue;
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_Shape_x_get ( SEXP self, SEXP s_swig_copy)
{
  double result;
  Shape *arg1 = (Shape *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_Shape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Shape_x_get" "', argument " "1"" of type '" "Shape *""'"); 
  }
  arg1 = reinterpret_cast< Shape * >(argp1);
  result = (double) ((arg1)->x);
  r_ans = SWIG_From_double(static_cast< double >(result));
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_Shape_y_set ( SEXP self, SEXP s_y)
{
  Shape *arg1 = (Shape *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_Shape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Shape_y_set" "', argument " "1"" of type '" "Shape *""'"); 
  }
  arg1 = reinterpret_cast< Shape * >(argp1);
  arg2 = static_cast< double >(REAL(s_y)[0]);
  if (arg1) (arg1)->y = arg2;
  r_ans = R_NilValue;
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_Shape_y_get ( SEXP self, SEXP s_swig_copy)
{
  double result;
  Shape *arg1 = (Shape *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_Shape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Shape_y_get" "', argument " "1"" of type '" "Shape *""'"); 
  }
  arg1 = reinterpret_cast< Shape * >(argp1);
  result = (double) ((arg1)->y);
  r_ans = SWIG_From_double(static_cast< double >(result));
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_Shape_move ( SEXP self, SEXP dx, SEXP dy)
{
  Shape *arg1 = (Shape *) 0 ;
  double arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_Shape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Shape_move" "', argument " "1"" of type '" "Shape *""'"); 
  }
  arg1 = reinterpret_cast< Shape * >(argp1);
  arg2 = static_cast< double >(REAL(dx)[0]);
  arg3 = static_cast< double >(REAL(dy)[0]);
  (arg1)->move(arg2,arg3);
  r_ans = R_NilValue;
  
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_Shape_area ( SEXP self, SEXP s_swig_copy)
{
  double result;
  Shape *arg1 = (Shape *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_Shape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Shape_area" "', argument " "1"" of type '" "Shape *""'"); 
  }
  arg1 = reinterpret_cast< Shape * >(argp1);
  result = (double)(arg1)->area();
  r_ans = SWIG_From_double(static_cast< double >(result));
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_Shape_perimeter ( SEXP self, SEXP s_swig_copy)
{
  double result;
  Shape *arg1 = (Shape *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_Shape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Shape_perimeter" "', argument " "1"" of type '" "Shape *""'"); 
  }
  arg1 = reinterpret_cast< Shape * >(argp1);
  result = (double)(arg1)->perimeter();
  r_ans = SWIG_From_double(static_cast< double >(result));
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_Shape_nshapes_set ( SEXP s_nshapes)
{
  int arg1 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  arg1 = static_cast< int >(INTEGER(s_nshapes)[0]);
  Shape::nshapes = arg1;
  r_ans = R_NilValue;
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_Shape_nshapes_get ( SEXP s_swig_copy)
{
  int result;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  result = (int)Shape::nshapes;
  r_ans = Rf_ScalarInteger(result);
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_new_Circle ( SEXP r)
{
  Circle *result = 0 ;
  double arg1 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  arg1 = static_cast< double >(REAL(r)[0]);
  result = (Circle *)new Circle(arg1);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Circle, R_SWIG_OWNER |  0 );
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_Circle_area ( SEXP self, SEXP s_swig_copy)
{
  double result;
  Circle *arg1 = (Circle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_Circle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Circle_area" "', argument " "1"" of type '" "Circle *""'"); 
  }
  arg1 = reinterpret_cast< Circle * >(argp1);
  result = (double)(arg1)->area();
  r_ans = SWIG_From_double(static_cast< double >(result));
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_Circle_perimeter ( SEXP self, SEXP s_swig_copy)
{
  double result;
  Circle *arg1 = (Circle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_Circle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Circle_perimeter" "', argument " "1"" of type '" "Circle *""'"); 
  }
  arg1 = reinterpret_cast< Circle * >(argp1);
  result = (double)(arg1)->perimeter();
  r_ans = SWIG_From_double(static_cast< double >(result));
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_delete_Circle ( SEXP self)
{
  Circle *arg1 = (Circle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_Circle, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Circle" "', argument " "1"" of type '" "Circle *""'"); 
  }
  arg1 = reinterpret_cast< Circle * >(argp1);
  delete arg1;
  r_ans = R_NilValue;
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  R_ClearExternalPtr(self);
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_new_Square ( SEXP w)
{
  Square *result = 0 ;
  double arg1 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  arg1 = static_cast< double >(REAL(w)[0]);
  result = (Square *)new Square(arg1);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Square, R_SWIG_OWNER |  0 );
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_Square_area ( SEXP self, SEXP s_swig_copy)
{
  double result;
  Square *arg1 = (Square *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_Square, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Square_area" "', argument " "1"" of type '" "Square *""'"); 
  }
  arg1 = reinterpret_cast< Square * >(argp1);
  result = (double)(arg1)->area();
  r_ans = SWIG_From_double(static_cast< double >(result));
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_Square_perimeter ( SEXP self, SEXP s_swig_copy)
{
  double result;
  Square *arg1 = (Square *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_Square, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Square_perimeter" "', argument " "1"" of type '" "Square *""'"); 
  }
  arg1 = reinterpret_cast< Square * >(argp1);
  result = (double)(arg1)->perimeter();
  r_ans = SWIG_From_double(static_cast< double >(result));
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_delete_Square ( SEXP self)
{
  Square *arg1 = (Square *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_Square, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Square" "', argument " "1"" of type '" "Square *""'"); 
  }
  arg1 = reinterpret_cast< Square * >(argp1);
  delete arg1;
  r_ans = R_NilValue;
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  R_ClearExternalPtr(self);
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_RSNNS_getFuncInfo ( SEXP funcno)
{
  char *result = 0 ;
  int arg1 ;
  int *arg2 = (int *) 0 ;
  int temp2 ;
  int res2 = SWIG_TMPOBJ ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  SEXP R_OutputValues;
  
  arg2 = &temp2;
  arg1 = static_cast< int >(INTEGER(funcno)[0]);
  result = (char *)RSNNS_getFuncInfo(arg1,arg2);
  r_ans = result ? Rf_mkString(reinterpret_cast< char * >(result)) : R_NilValue;
  Rf_protect(r_ans);
  Rf_protect(R_OutputValues = Rf_allocVector(VECSXP,2));
  r_nprotect += 2;
  SET_VECTOR_ELT(R_OutputValues, 0, r_ans);
  r_ans = R_OutputValues;
  if (SWIG_IsTmpObj(res2)) {
    SET_VECTOR_ELT(r_ans, 1, SWIG_From_int((*arg2)));
  } else {
    int new_flags = SWIG_IsNewObj(res2) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    SET_VECTOR_ELT(r_ans, 1, SWIG_R_NewPointerObj((void*)(arg2), SWIGTYPE_p_int, new_flags));
  }
  
  
  //free(arg2);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_RSNNS_getUnitDefaults ( )
{
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  RSNNS_getUnitDefaults();
  r_ans = R_NilValue;
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_RSNNS_testSinglePattern ( SEXP patternNo, SEXP decay, SEXP s_swig_copy)
{
  krui_err result;
  int arg1 ;
  float arg2 ;
  float *arg3 = (float *) 0 ;
  float temp3 ;
  int res3 = SWIG_TMPOBJ ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  SEXP R_OutputValues;
  
  arg3 = &temp3;
  arg1 = static_cast< int >(INTEGER(patternNo)[0]);
  arg2 = static_cast< float >(REAL(decay)[0]);
  result = (krui_err)RSNNS_testSinglePattern(arg1,arg2,arg3);
  r_ans = Rf_ScalarInteger(result);
  Rf_protect(r_ans);
  Rf_protect(R_OutputValues = Rf_allocVector(VECSXP,2));
  r_nprotect += 2;
  SET_VECTOR_ELT(R_OutputValues, 0, r_ans);
  r_ans = R_OutputValues;
  if (SWIG_IsTmpObj(res3)) {
    SET_VECTOR_ELT(r_ans, 1, SWIG_From_float((*arg3)));
  } else {
    int new_flags = SWIG_IsNewObj(res3) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    SET_VECTOR_ELT(r_ans, 1, SWIG_R_NewPointerObj((void*)(arg3), SWIGTYPE_p_float, new_flags));
  }
  
  
  
  //free(arg3);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


#ifdef __cplusplus
}
#endif

/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_SquareTo_p_Shape(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Shape *)  ((Square *) x));
}
static void *_p_CircleTo_p_Shape(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Shape *)  ((Circle *) x));
}
static swig_type_info _swigt__p_Circle = {"_p_Circle", "Circle *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Link = {"_p_Link", "Link *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_NetLearnParameters = {"_p_NetLearnParameters", "NetLearnParameters *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_PosType = {"_p_PosType", "PosType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_PositionVector = {"_p_PositionVector", "PositionVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Shape = {"_p_Shape", "Shape *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Square = {"_p_Square", "Square *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_UnitList = {"_p_UnitList", "UnitList *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_int__void = {"_p_f_int__void", "void (*)(int)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_float = {"_p_float", "FlintType *|float *|FlintTypeParam *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int = {"_p_int", "int *|krui_err *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_PositionVector = {"_p_p_PositionVector", "PositionVector **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_char = {"_p_p_char", "char **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_double = {"_p_p_double", "double **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_float = {"_p_p_float", "float **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_int = {"_p_p_int", "int **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pattern_descriptor = {"_p_pattern_descriptor", "pattern_descriptor *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pattern_set_info = {"_p_pattern_set_info", "pattern_set_info *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_int = {"_p_unsigned_int", "unsigned int *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_Circle,
  &_swigt__p_Link,
  &_swigt__p_NetLearnParameters,
  &_swigt__p_PosType,
  &_swigt__p_PositionVector,
  &_swigt__p_Shape,
  &_swigt__p_Square,
  &_swigt__p_UnitList,
  &_swigt__p_char,
  &_swigt__p_f_int__void,
  &_swigt__p_float,
  &_swigt__p_int,
  &_swigt__p_p_PositionVector,
  &_swigt__p_p_char,
  &_swigt__p_p_double,
  &_swigt__p_p_float,
  &_swigt__p_p_int,
  &_swigt__p_pattern_descriptor,
  &_swigt__p_pattern_set_info,
  &_swigt__p_unsigned_int,
};

static swig_cast_info _swigc__p_Circle[] = {  {&_swigt__p_Circle, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Link[] = {  {&_swigt__p_Link, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_NetLearnParameters[] = {  {&_swigt__p_NetLearnParameters, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PosType[] = {  {&_swigt__p_PosType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PositionVector[] = {  {&_swigt__p_PositionVector, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Shape[] = {  {&_swigt__p_Square, _p_SquareTo_p_Shape, 0, 0},  {&_swigt__p_Shape, 0, 0, 0},  {&_swigt__p_Circle, _p_CircleTo_p_Shape, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Square[] = {  {&_swigt__p_Square, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_UnitList[] = {  {&_swigt__p_UnitList, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_int__void[] = {  {&_swigt__p_f_int__void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_float[] = {  {&_swigt__p_float, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_PositionVector[] = {  {&_swigt__p_p_PositionVector, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_char[] = {  {&_swigt__p_p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_double[] = {  {&_swigt__p_p_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_float[] = {  {&_swigt__p_p_float, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_int[] = {  {&_swigt__p_p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pattern_descriptor[] = {  {&_swigt__p_pattern_descriptor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pattern_set_info[] = {  {&_swigt__p_pattern_set_info, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_int[] = {  {&_swigt__p_unsigned_int, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_Circle,
  _swigc__p_Link,
  _swigc__p_NetLearnParameters,
  _swigc__p_PosType,
  _swigc__p_PositionVector,
  _swigc__p_Shape,
  _swigc__p_Square,
  _swigc__p_UnitList,
  _swigc__p_char,
  _swigc__p_f_int__void,
  _swigc__p_float,
  _swigc__p_int,
  _swigc__p_p_PositionVector,
  _swigc__p_p_char,
  _swigc__p_p_double,
  _swigc__p_p_float,
  _swigc__p_p_int,
  _swigc__p_pattern_descriptor,
  _swigc__p_pattern_set_info,
  _swigc__p_unsigned_int,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */


/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic 
 * memory is used. Also, since swig_type_info structures store pointers to 
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization. 
 * The idea is that swig generates all the structures that are needed. 
 * The runtime then collects these partially filled structures. 
 * The SWIG_InitializeModule function takes these initial arrays out of 
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned staticly to an initial 
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it 
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded. 
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the 
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int found, init;

  clientdata = clientdata;

  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }

  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
    module_head = &swig_module;
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    found=0;
    iter=module_head;
    do {
      if (iter==&swig_module) {
        found=1;
        break;
      }
      iter=iter->next;
    } while (iter!= module_head);

    /* if the is found in the list, then all is done and we may leave */
    if (found) return;
    /* otherwise we must add out module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }

  /* When multiple interpeters are used, a module could have already been initialized in
     a different interpreter, but not yet have a pointer in this interpreter.
     In this case, we do not want to continue adding types... everything should be
     set up already */
  if (init == 0) return;

  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;
  
#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif

    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
	type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }

    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {
    
      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
	if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
	if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
	  printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
	  cast->type = ret;
	  ret = 0;
	} else {
	  /* Check for casting already in the list */
	  swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
	  if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
	  if (!ocast) ret = 0;
	}
      }

      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
	printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;

#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
  printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;

  if (init_run) return;
  init_run = 1;

  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
            SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{ /* c-mode */
#endif
}
#endif


SWIGEXPORT void SWIG_init(void) {

}
#ifdef __cplusplus
extern "C" {
#endif

#include <R_ext/Rdynload.h>

#ifdef __cplusplus
}
#endif

SWIGINTERN R_CallMethodDef CallEntries[] = {
   {"R_swig_Shape_nshapes_set", (DL_FUNC) &R_swig_Shape_nshapes_set, 1},
   {"R_swig_krui_getUnitTType", (DL_FUNC) &R_swig_krui_getUnitTType, 2},
   {"R_swig_krui_setUnitTType", (DL_FUNC) &R_swig_krui_setUnitTType, 3},
   {"R_swig_krui_areConnectedWeight", (DL_FUNC) &R_swig_krui_areConnectedWeight, 4},
   {"R_swig_krui_errorHandler_set", (DL_FUNC) &R_swig_krui_errorHandler_set, 1},
   {"R_swig_Shape_area", (DL_FUNC) &R_swig_Shape_area, 2},
   {"R_swig_Circle_area", (DL_FUNC) &R_swig_Circle_area, 2},
   {"R_swig_Square_area", (DL_FUNC) &R_swig_Square_area, 2},
   {"R_swig_krui_updateSingleUnit", (DL_FUNC) &R_swig_krui_updateSingleUnit, 2},
   {"R_swig_krui_getPatternNo", (DL_FUNC) &R_swig_krui_getPatternNo, 1},
   {"R_swig_krui_setPatternNo", (DL_FUNC) &R_swig_krui_setPatternNo, 2},
   {"R_swig_krui_getNetInfo", (DL_FUNC) &R_swig_krui_getNetInfo, 4},
   {"R_swig_krui_resetNet", (DL_FUNC) &R_swig_krui_resetNet, 0},
   {"R_swig_krui_updateNet", (DL_FUNC) &R_swig_krui_updateNet, 3},
   {"R_swig_krui_trainNetwork", (DL_FUNC) &R_swig_krui_trainNetwork, 2},
   {"R_swig_testTrainNeuralNetwork", (DL_FUNC) &R_swig_testTrainNeuralNetwork, 4},
   {"R_swig_krui_getNoOfFunctions", (DL_FUNC) &R_swig_krui_getNoOfFunctions, 1},
   {"R_swig_krui_jogCorrWeights", (DL_FUNC) &R_swig_krui_jogCorrWeights, 4},
   {"R_swig_krui_jogWeights", (DL_FUNC) &R_swig_krui_jogWeights, 2},
   {"R_swig_krui_learnAllPatternsFF", (DL_FUNC) &R_swig_krui_learnAllPatternsFF, 3},
   {"R_swig_krui_getUnitBias", (DL_FUNC) &R_swig_krui_getUnitBias, 2},
   {"R_swig_krui_setUnitBias", (DL_FUNC) &R_swig_krui_setUnitBias, 2},
   {"R_swig_krui_setPrunFunc", (DL_FUNC) &R_swig_krui_setPrunFunc, 2},
   {"R_swig_krui_getPrunFunc", (DL_FUNC) &R_swig_krui_getPrunFunc, 0},
   {"R_swig_krui_allocateUnits", (DL_FUNC) &R_swig_krui_allocateUnits, 2},
   {"R_swig_krui_getNoOfTTypeUnits", (DL_FUNC) &R_swig_krui_getNoOfTTypeUnits, 2},
   {"R_swig_getFuncInfoWrapper2", (DL_FUNC) &R_swig_getFuncInfoWrapper2, 1},
   {"R_swig_krui_getNoOfInputUnits", (DL_FUNC) &R_swig_krui_getNoOfInputUnits, 1},
   {"R_swig_krui_getNoOfOutputUnits", (DL_FUNC) &R_swig_krui_getNoOfOutputUnits, 1},
   {"R_swig_krui_getNoOfSpecialInputUnits", (DL_FUNC) &R_swig_krui_getNoOfSpecialInputUnits, 1},
   {"R_swig_krui_getNoOfSpecialOutputUnits", (DL_FUNC) &R_swig_krui_getNoOfSpecialOutputUnits, 1},
   {"R_swig_krui_DefShowSubPat", (DL_FUNC) &R_swig_krui_DefShowSubPat, 3},
   {"R_swig_krui_setSiteName", (DL_FUNC) &R_swig_krui_setSiteName, 2},
   {"R_swig_krui_getSiteName", (DL_FUNC) &R_swig_krui_getSiteName, 0},
   {"R_swig_krui_getFTypeSiteName", (DL_FUNC) &R_swig_krui_getFTypeSiteName, 0},
   {"R_swig_krui_setFTypeSiteName", (DL_FUNC) &R_swig_krui_setFTypeSiteName, 2},
   {"R_swig_krui_loadNet", (DL_FUNC) &R_swig_krui_loadNet, 3},
   {"R_swig_krui_setLinkWeight", (DL_FUNC) &R_swig_krui_setLinkWeight, 1},
   {"R_swig_krui_getLinkWeight", (DL_FUNC) &R_swig_krui_getLinkWeight, 1},
   {"R_swig_krui_deleteSiteTableEntry", (DL_FUNC) &R_swig_krui_deleteSiteTableEntry, 2},
   {"R_swig_krui_changeSiteTableEntry", (DL_FUNC) &R_swig_krui_changeSiteTableEntry, 4},
   {"R_swig_krui_createSiteTableEntry", (DL_FUNC) &R_swig_krui_createSiteTableEntry, 3},
   {"R_swig_krui_getNextSiteTableEntry", (DL_FUNC) &R_swig_krui_getNextSiteTableEntry, 3},
   {"R_swig_krui_getFirstSiteTableEntry", (DL_FUNC) &R_swig_krui_getFirstSiteTableEntry, 3},
   {"R_swig_krui_setFirstFTypeEntry", (DL_FUNC) &R_swig_krui_setFirstFTypeEntry, 1},
   {"R_swig_krui_setNextFTypeEntry", (DL_FUNC) &R_swig_krui_setNextFTypeEntry, 1},
   {"R_swig_krui_setFTypeEntry", (DL_FUNC) &R_swig_krui_setFTypeEntry, 2},
   {"R_swig_krui_createFTypeEntry", (DL_FUNC) &R_swig_krui_createFTypeEntry, 6},
   {"R_swig_krui_deleteFTypeEntry", (DL_FUNC) &R_swig_krui_deleteFTypeEntry, 2},
   {"R_swig_krui_getFirstSymbolTableEntry", (DL_FUNC) &R_swig_krui_getFirstSymbolTableEntry, 3},
   {"R_swig_krui_getNextSymbolTableEntry", (DL_FUNC) &R_swig_krui_getNextSymbolTableEntry, 3},
   {"R_swig_krui_symbolSearch", (DL_FUNC) &R_swig_krui_symbolSearch, 3},
   {"R_swig_krui_getUnitCenters", (DL_FUNC) &R_swig_krui_getUnitCenters, 4},
   {"R_swig_krui_setUnitCenters", (DL_FUNC) &R_swig_krui_setUnitCenters, 4},
   {"R_swig_testTrainNeuralNetworkWrapper", (DL_FUNC) &R_swig_testTrainNeuralNetworkWrapper, 1},
   {"R_swig_getFuncInfoWrapper", (DL_FUNC) &R_swig_getFuncInfoWrapper, 2},
   {"R_swig_Shape_perimeter", (DL_FUNC) &R_swig_Shape_perimeter, 2},
   {"R_swig_Circle_perimeter", (DL_FUNC) &R_swig_Circle_perimeter, 2},
   {"R_swig_Square_perimeter", (DL_FUNC) &R_swig_Square_perimeter, 2},
   {"R_swig_krui_learnSinglePatternFF", (DL_FUNC) &R_swig_krui_learnSinglePatternFF, 4},
   {"R_swig_krui_getUnitDefaults", (DL_FUNC) &R_swig_krui_getUnitDefaults, 7},
   {"R_swig_krui_setUnitDefaults", (DL_FUNC) &R_swig_krui_setUnitDefaults, 8},
   {"R_swig_RSNNS_getUnitDefaults", (DL_FUNC) &R_swig_RSNNS_getUnitDefaults, 0},
   {"R_swig_delete_Shape", (DL_FUNC) &R_swig_delete_Shape, 1},
   {"R_swig_PosType_z_set", (DL_FUNC) &R_swig_PosType_z_set, 2},
   {"R_swig_krui_initializeNet", (DL_FUNC) &R_swig_krui_initializeNet, 3},
   {"R_swig_krui_setUnitFType", (DL_FUNC) &R_swig_krui_setUnitFType, 3},
   {"R_swig_krui_isConnected", (DL_FUNC) &R_swig_krui_isConnected, 2},
   {"R_swig_krui_areConnected", (DL_FUNC) &R_swig_krui_areConnected, 3},
   {"R_swig_krui_setSeedNo", (DL_FUNC) &R_swig_krui_setSeedNo, 1},
   {"R_swig_PosType_y_set", (DL_FUNC) &R_swig_PosType_y_set, 2},
   {"R_swig_Shape_y_set", (DL_FUNC) &R_swig_Shape_y_set, 2},
   {"R_swig_PosType_x_set", (DL_FUNC) &R_swig_PosType_x_set, 2},
   {"R_swig_krui_setFirstFTypeSite", (DL_FUNC) &R_swig_krui_setFirstFTypeSite, 1},
   {"R_swig_krui_setNextFTypeSite", (DL_FUNC) &R_swig_krui_setNextFTypeSite, 1},
   {"R_swig_Shape_x_set", (DL_FUNC) &R_swig_Shape_x_set, 2},
   {"R_swig_krui_setNextSite", (DL_FUNC) &R_swig_krui_setNextSite, 1},
   {"R_swig_krui_error_code_get", (DL_FUNC) &R_swig_krui_error_code_get, 1},
   {"R_swig_krui_setCurrPatSet", (DL_FUNC) &R_swig_krui_setCurrPatSet, 2},
   {"R_swig_krui_copyUnit", (DL_FUNC) &R_swig_krui_copyUnit, 3},
   {"R_swig_krui_useClassDistribution", (DL_FUNC) &R_swig_krui_useClassDistribution, 2},
   {"R_swig_krui_setClassDistribution", (DL_FUNC) &R_swig_krui_setClassDistribution, 2},
   {"R_swig_krui_createUnit", (DL_FUNC) &R_swig_krui_createUnit, 6},
   {"R_swig_krui_deleteUnit", (DL_FUNC) &R_swig_krui_deleteUnit, 2},
   {"R_swig_krui_getCurrentPredUnit", (DL_FUNC) &R_swig_krui_getCurrentPredUnit, 2},
   {"R_swig_krui_getNextPredUnit", (DL_FUNC) &R_swig_krui_getNextPredUnit, 2},
   {"R_swig_krui_getFirstPredUnit", (DL_FUNC) &R_swig_krui_getFirstPredUnit, 2},
   {"R_swig_krui_addSite", (DL_FUNC) &R_swig_krui_addSite, 2},
   {"R_swig_krui_getNextSuccUnit", (DL_FUNC) &R_swig_krui_getNextSuccUnit, 2},
   {"R_swig_krui_getFirstSuccUnit", (DL_FUNC) &R_swig_krui_getFirstSuccUnit, 3},
   {"R_swig_krui_getNoOfUnits", (DL_FUNC) &R_swig_krui_getNoOfUnits, 1},
   {"R_swig_krui_setFirstSite", (DL_FUNC) &R_swig_krui_setFirstSite, 1},
   {"R_swig_krui_GetPatInfo", (DL_FUNC) &R_swig_krui_GetPatInfo, 3},
   {"R_swig_krui_allocNewPatternSet", (DL_FUNC) &R_swig_krui_allocNewPatternSet, 1},
   {"R_swig_krui_spanning_tree", (DL_FUNC) &R_swig_krui_spanning_tree, 0},
   {"R_swig_krui_setUnitActFunc", (DL_FUNC) &R_swig_krui_setUnitActFunc, 3},
   {"R_swig_krui_setFTypeActFunc", (DL_FUNC) &R_swig_krui_setFTypeActFunc, 2},
   {"R_swig_krui_deletePatSet", (DL_FUNC) &R_swig_krui_deletePatSet, 2},
   {"R_swig_krui_NA_Error", (DL_FUNC) &R_swig_krui_NA_Error, 5},
   {"R_swig_krui_setSite", (DL_FUNC) &R_swig_krui_setSite, 2},
   {"R_swig_krui_getUnitFTypeName", (DL_FUNC) &R_swig_krui_getUnitFTypeName, 1},
   {"R_swig_krui_getFTypeName", (DL_FUNC) &R_swig_krui_getFTypeName, 0},
   {"R_swig_krui_setFTypeName", (DL_FUNC) &R_swig_krui_setFTypeName, 2},
   {"R_swig_krui_searchNextUnitName", (DL_FUNC) &R_swig_krui_searchNextUnitName, 1},
   {"R_swig_krui_searchUnitName", (DL_FUNC) &R_swig_krui_searchUnitName, 2},
   {"R_swig_krui_setUnitName", (DL_FUNC) &R_swig_krui_setUnitName, 3},
   {"R_swig_krui_getUnitName", (DL_FUNC) &R_swig_krui_getUnitName, 1},
   {"R_swig_memmove", (DL_FUNC) &R_swig_memmove, 2},
   {"R_swig_krui_setInitialisationFunc", (DL_FUNC) &R_swig_krui_setInitialisationFunc, 2},
   {"R_swig_krui_getInitialisationFunc", (DL_FUNC) &R_swig_krui_getInitialisationFunc, 0},
   {"R_swig_krui_getUnitPosition", (DL_FUNC) &R_swig_krui_getUnitPosition, 2},
   {"R_swig_krui_setUnitPosition", (DL_FUNC) &R_swig_krui_setUnitPosition, 2},
   {"R_swig_krui_getUnitNoAtPosition", (DL_FUNC) &R_swig_krui_getUnitNoAtPosition, 3},
   {"R_swig_krui_getUnitNoNearPosition", (DL_FUNC) &R_swig_krui_getUnitNoNearPosition, 5},
   {"R_swig_new_PosType", (DL_FUNC) &R_swig_new_PosType, 0},
   {"R_swig_delete_PosType", (DL_FUNC) &R_swig_delete_PosType, 1},
   {"R_swig_krui_getVariance", (DL_FUNC) &R_swig_krui_getVariance, 1},
   {"R_swig_krui_getFuncParamInfo", (DL_FUNC) &R_swig_krui_getFuncParamInfo, 3},
   {"R_swig_krui_modifyPattern", (DL_FUNC) &R_swig_krui_modifyPattern, 1},
   {"R_swig_krui_deletePattern", (DL_FUNC) &R_swig_krui_deletePattern, 1},
   {"R_swig_krui_newPattern", (DL_FUNC) &R_swig_krui_newPattern, 1},
   {"R_swig_krui_showPattern", (DL_FUNC) &R_swig_krui_showPattern, 2},
   {"R_swig_krui_testSinglePattern", (DL_FUNC) &R_swig_krui_testSinglePattern, 4},
   {"R_swig_krui_learnSinglePattern", (DL_FUNC) &R_swig_krui_learnSinglePattern, 4},
   {"R_swig_krui_GetShapeOfSubPattern", (DL_FUNC) &R_swig_krui_GetShapeOfSubPattern, 4},
   {"R_swig_RSNNS_testSinglePattern", (DL_FUNC) &R_swig_RSNNS_testSinglePattern, 3},
   {"R_swig_krui_deleteLink", (DL_FUNC) &R_swig_krui_deleteLink, 1},
   {"R_swig_krui_createLink", (DL_FUNC) &R_swig_krui_createLink, 3},
   {"R_swig_cdata", (DL_FUNC) &R_swig_cdata, 3},
   {"R_swig_krui_isFunction", (DL_FUNC) &R_swig_krui_isFunction, 3},
   {"R_swig_krui_setCurrentUnit", (DL_FUNC) &R_swig_krui_setCurrentUnit, 2},
   {"R_swig_krui_getCurrentUnit", (DL_FUNC) &R_swig_krui_getCurrentUnit, 1},
   {"R_swig_krui_getUnitLayerNo", (DL_FUNC) &R_swig_krui_getUnitLayerNo, 2},
   {"R_swig_krui_setUnitLayerNo", (DL_FUNC) &R_swig_krui_setUnitLayerNo, 2},
   {"R_swig_krui_setErrorHandler", (DL_FUNC) &R_swig_krui_setErrorHandler, 2},
   {"R_swig_krui_execHandler", (DL_FUNC) &R_swig_krui_execHandler, 1},
   {"R_swig_Shape_nshapes_get", (DL_FUNC) &R_swig_Shape_nshapes_get, 1},
   {"R_swig_krui_getUnitSubnetNo", (DL_FUNC) &R_swig_krui_getUnitSubnetNo, 2},
   {"R_swig_krui_setUnitSubnetNo", (DL_FUNC) &R_swig_krui_setUnitSubnetNo, 2},
   {"R_swig_krui_errorHandler_get", (DL_FUNC) &R_swig_krui_errorHandler_get, 0},
   {"R_swig_krui_checkPruning", (DL_FUNC) &R_swig_krui_checkPruning, 1},
   {"R_swig_krui_createLinkWithAdditionalParameters", (DL_FUNC) &R_swig_krui_createLinkWithAdditionalParameters, 5},
   {"R_swig_krui_getNetworkErrorArray", (DL_FUNC) &R_swig_krui_getNetworkErrorArray, 4},
   {"R_swig_krui_saveNewPatterns", (DL_FUNC) &R_swig_krui_saveNewPatterns, 3},
   {"R_swig_krui_loadNewPatterns", (DL_FUNC) &R_swig_krui_loadNewPatterns, 3},
   {"R_swig_krui_getTotalNoOfSubPatterns", (DL_FUNC) &R_swig_krui_getTotalNoOfSubPatterns, 1},
   {"R_swig_krui_getNoOfPatterns", (DL_FUNC) &R_swig_krui_getNoOfPatterns, 1},
   {"R_swig_krui_shuffleSubPatterns", (DL_FUNC) &R_swig_krui_shuffleSubPatterns, 2},
   {"R_swig_krui_shufflePatterns", (DL_FUNC) &R_swig_krui_shufflePatterns, 2},
   {"R_swig_krui_deleteAllPatterns", (DL_FUNC) &R_swig_krui_deleteAllPatterns, 0},
   {"R_swig_krui_testAllPatterns", (DL_FUNC) &R_swig_krui_testAllPatterns, 3},
   {"R_swig_krui_learnAllPatterns", (DL_FUNC) &R_swig_krui_learnAllPatterns, 3},
   {"R_swig_myBackpropLearnAllPatterns", (DL_FUNC) &R_swig_myBackpropLearnAllPatterns, 2},
   {"R_swig_krui_getSiteValue", (DL_FUNC) &R_swig_krui_getSiteValue, 1},
   {"R_swig_krui_inv_forwardPass", (DL_FUNC) &R_swig_krui_inv_forwardPass, 1},
   {"R_swig_krui_inv_backwardPass", (DL_FUNC) &R_swig_krui_inv_backwardPass, 7},
   {"R_swig_krui_setClassInfo", (DL_FUNC) &R_swig_krui_setClassInfo, 2},
   {"R_swig_krui_error_code_set", (DL_FUNC) &R_swig_krui_error_code_set, 1},
   {"R_swig_krui_createFTypeUnit", (DL_FUNC) &R_swig_krui_createFTypeUnit, 2},
   {"R_swig_krui_isUnitFrozen", (DL_FUNC) &R_swig_krui_isUnitFrozen, 2},
   {"R_swig_krui_getNextUnit", (DL_FUNC) &R_swig_krui_getNextUnit, 1},
   {"R_swig_new_Circle", (DL_FUNC) &R_swig_new_Circle, 1},
   {"R_swig_delete_Circle", (DL_FUNC) &R_swig_delete_Circle, 1},
   {"R_swig_krui_setRemapFunc", (DL_FUNC) &R_swig_krui_setRemapFunc, 3},
   {"R_swig_krui_getSiteFuncName", (DL_FUNC) &R_swig_krui_getSiteFuncName, 0},
   {"R_swig_krui_getSiteTableFuncName", (DL_FUNC) &R_swig_krui_getSiteTableFuncName, 1},
   {"R_swig_krui_getUnitActFuncName", (DL_FUNC) &R_swig_krui_getUnitActFuncName, 1},
   {"R_swig_krui_getUnitOutFuncName", (DL_FUNC) &R_swig_krui_getUnitOutFuncName, 1},
   {"R_swig_krui_getFTypeActFuncName", (DL_FUNC) &R_swig_krui_getFTypeActFuncName, 0},
   {"R_swig_krui_deleteNet", (DL_FUNC) &R_swig_krui_deleteNet, 0},
   {"R_swig_krui_setUpdateFunc", (DL_FUNC) &R_swig_krui_setUpdateFunc, 2},
   {"R_swig_krui_getUpdateFunc", (DL_FUNC) &R_swig_krui_getUpdateFunc, 0},
   {"R_swig_krui_getVersion", (DL_FUNC) &R_swig_krui_getVersion, 0},
   {"R_swig_krui_initInversion", (DL_FUNC) &R_swig_krui_initInversion, 1},
   {"R_swig_krui_setFFLearnFunc", (DL_FUNC) &R_swig_krui_setFFLearnFunc, 2},
   {"R_swig_krui_getFFLearnFunc", (DL_FUNC) &R_swig_krui_getFFLearnFunc, 0},
   {"R_swig_krui_setLearnFunc", (DL_FUNC) &R_swig_krui_setLearnFunc, 2},
   {"R_swig_krui_getLearnFunc", (DL_FUNC) &R_swig_krui_getLearnFunc, 0},
   {"R_swig_krui_getNextPredUnitAndData", (DL_FUNC) &R_swig_krui_getNextPredUnitAndData, 5},
   {"R_swig_krui_getFirstPredUnitAndData", (DL_FUNC) &R_swig_krui_getFirstPredUnitAndData, 5},
   {"R_swig_krui_saveResultParam", (DL_FUNC) &R_swig_krui_saveResultParam, 9},
   {"R_swig_krui_setSpecialNetworkType", (DL_FUNC) &R_swig_krui_setSpecialNetworkType, 2},
   {"R_swig_krui_getSpecialNetworkType", (DL_FUNC) &R_swig_krui_getSpecialNetworkType, 1},
   {"R_swig_krui_createDefaultUnit", (DL_FUNC) &R_swig_krui_createDefaultUnit, 1},
   {"R_swig_krui_deleteAllOutputLinks", (DL_FUNC) &R_swig_krui_deleteAllOutputLinks, 1},
   {"R_swig_krui_deleteAllInputLinks", (DL_FUNC) &R_swig_krui_deleteAllInputLinks, 1},
   {"R_swig_krui_freezeUnit", (DL_FUNC) &R_swig_krui_freezeUnit, 2},
   {"R_swig_krui_unfreezeUnit", (DL_FUNC) &R_swig_krui_unfreezeUnit, 2},
   {"R_swig_krui_getFirstUnit", (DL_FUNC) &R_swig_krui_getFirstUnit, 1},
   {"R_swig_krui_getUnitValueA", (DL_FUNC) &R_swig_krui_getUnitValueA, 2},
   {"R_swig_krui_setUnitValueA", (DL_FUNC) &R_swig_krui_setUnitValueA, 2},
   {"R_swig_new_Square", (DL_FUNC) &R_swig_new_Square, 1},
   {"R_swig_delete_Square", (DL_FUNC) &R_swig_delete_Square, 1},
   {"R_swig_krui_cc_updatePosOfSpecialUnits", (DL_FUNC) &R_swig_krui_cc_updatePosOfSpecialUnits, 0},
   {"R_swig_krui_cc_deleteAllSpecialUnits", (DL_FUNC) &R_swig_krui_cc_deleteAllSpecialUnits, 1},
   {"R_swig_krui_getErrorCode", (DL_FUNC) &R_swig_krui_getErrorCode, 1},
   {"R_swig_encoderExample", (DL_FUNC) &R_swig_encoderExample, 0},
   {"R_swig_krui_getUnitOutput", (DL_FUNC) &R_swig_krui_getUnitOutput, 2},
   {"R_swig_krui_setUnitOutput", (DL_FUNC) &R_swig_krui_setUnitOutput, 3},
   {"R_swig_krui_stopTraining", (DL_FUNC) &R_swig_krui_stopTraining, 1},
   {"R_swig_PosType_z_get", (DL_FUNC) &R_swig_PosType_z_get, 2},
   {"R_swig_krui_setUnitOutFunc", (DL_FUNC) &R_swig_krui_setUnitOutFunc, 3},
   {"R_swig_krui_setFTypeOutFunc", (DL_FUNC) &R_swig_krui_setFTypeOutFunc, 2},
   {"R_swig_krui_xyTransTable", (DL_FUNC) &R_swig_krui_xyTransTable, 5},
   {"R_swig_PosType_y_get", (DL_FUNC) &R_swig_PosType_y_get, 2},
   {"R_swig_Shape_y_get", (DL_FUNC) &R_swig_Shape_y_get, 2},
   {"R_swig_krui_saveNet", (DL_FUNC) &R_swig_krui_saveNet, 3},
   {"R_swig_krui_error", (DL_FUNC) &R_swig_krui_error, 1},
   {"R_swig_PosType_x_get", (DL_FUNC) &R_swig_PosType_x_get, 2},
   {"R_swig_Shape_x_get", (DL_FUNC) &R_swig_Shape_x_get, 2},
   {"R_swig_krui_setUnitInitialActivation", (DL_FUNC) &R_swig_krui_setUnitInitialActivation, 2},
   {"R_swig_krui_getUnitInitialActivation", (DL_FUNC) &R_swig_krui_getUnitInitialActivation, 2},
   {"R_swig_krui_setUnitActivation", (DL_FUNC) &R_swig_krui_setUnitActivation, 3},
   {"R_swig_krui_getUnitActivation", (DL_FUNC) &R_swig_krui_getUnitActivation, 2},
   {"R_swig_Shape_move", (DL_FUNC) &R_swig_Shape_move, 3},
   {"R_swig_krui_getFuncInfo", (DL_FUNC) &R_swig_krui_getFuncInfo, 1},
   {"R_swig_krui_kohonen_SetExtraParameter", (DL_FUNC) &R_swig_krui_kohonen_SetExtraParameter, 1},
   {"R_swig_RSNNS_getFuncInfo", (DL_FUNC) &R_swig_RSNNS_getFuncInfo, 1},
   {"R_swig_krui_deleteSite", (DL_FUNC) &R_swig_krui_deleteSite, 1},
   {"R_swig_krui_getMemoryManagerInfo", (DL_FUNC) &R_swig_krui_getMemoryManagerInfo, 6},
   {"R_swig_krui_countLinks", (DL_FUNC) &R_swig_krui_countLinks, 1},
   {"R_swig_krui_deleteUnitList", (DL_FUNC) &R_swig_krui_deleteUnitList, 3},
   {"R_swig_krui_getUnitInputType", (DL_FUNC) &R_swig_krui_getUnitInputType, 2},
   {"R_swig_krui_DefTrainSubPat", (DL_FUNC) &R_swig_krui_DefTrainSubPat, 1},
   {"R_swig_krui_AlignSubPat", (DL_FUNC) &R_swig_krui_AlignSubPat, 4},
   {NULL, NULL, 0}
};

extern "C" SWIGEXPORT void R_init_RSNNS(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);


SWIG_init();
SWIG_InitializeModule(0);


}

