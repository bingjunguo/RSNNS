#include "RSNNSKrui.h"

#include <R.h>
#include <R_ext/Print.h>

using namespace std;

RSNNSKrui::RSNNSKrui() {}

RSNNSKrui::~RSNNSKrui() {}

int RSNNSKrui::getNoOfUnits(void) {
  return krui_getNoOfUnits();
}

int RSNNSKrui::getFirstUnit(void) {
  return krui_getFirstUnit();
}

int RSNNSKrui::getNextUnit(void) {
  return krui_getNextUnit();
}

int RSNNSKrui::getCurrentUnit(void) {
  return krui_getCurrentUnit();
}

krui_err RSNNSKrui::setCurrentUnit(int unit_no) {
  return krui_setCurrentUnit(unit_no);
}

char *RSNNSKrui::getUnitName(int UnitNo) {
  return krui_getUnitName(UnitNo);
}

krui_err RSNNSKrui::setUnitName(int unit_no, char *unit_name) {
  return krui_setUnitName(unit_no, unit_name);
}

int RSNNSKrui::searchUnitName(char *unit_name) {
  return krui_searchUnitName(unit_name);
}

int RSNNSKrui::searchNextUnitName(void) {
  return krui_searchNextUnitName();
}

char *RSNNSKrui::getUnitOutFuncName(int UnitNo) {
  return krui_getUnitOutFuncName(UnitNo);
}

krui_err RSNNSKrui::setUnitOutFunc(int unit_no, char *unitOutFuncName) {
  return krui_setUnitOutFunc(unit_no, unitOutFuncName);
}

char *RSNNSKrui::getUnitActFuncName(int UnitNo) {
  return krui_getUnitActFuncName(UnitNo);
}

krui_err RSNNSKrui::setUnitActFunc(int unit_no, char *unitActFuncName) {
  return krui_setUnitActFunc(unit_no, unitActFuncName);
}

char *RSNNSKrui::getUnitFTypeName(int UnitNo) {
  return krui_getUnitFTypeName(UnitNo);
}

FlintType RSNNSKrui::getUnitActivation(int UnitNo) {
  return krui_getUnitActivation(UnitNo);
}

krui_err RSNNSKrui::setUnitActivation(int UnitNo,
                                     FlintTypeParam unit_activation) {
  krui_err err = krui_setUnitActivation(UnitNo, unit_activation);
  //if (err) Error("setUnitActivation", "%s", error(err));
  return err;
}

FlintType RSNNSKrui::getUnitInitialActivation(int UnitNo) {
  return krui_getUnitInitialActivation(UnitNo);
}

void RSNNSKrui::setUnitInitialActivation(int UnitNo,
                                               FlintTypeParam unit_i_activation) {
  krui_setUnitInitialActivation(UnitNo, unit_i_activation);
}

FlintType RSNNSKrui::getUnitOutput(int UnitNo) {
  return krui_getUnitOutput(UnitNo);
}

krui_err RSNNSKrui::setUnitOutput(int unit_no, FlintTypeParam unit_output) {
  return krui_setUnitOutput(unit_no, unit_output);
}

FlintType RSNNSKrui::getUnitBias(int UnitNo) {
  return krui_getUnitBias(UnitNo);
}

void RSNNSKrui::setUnitBias(int UnitNo, FlintTypeParam unit_bias) {
  krui_setUnitBias(UnitNo, unit_bias);
}

FlintType RSNNSKrui::getUnitValueA(int UnitNo) {
  return krui_getUnitValueA(UnitNo);
}

void RSNNSKrui::setUnitValueA(int UnitNo, FlintTypeParam unit_valueA) {
  krui_setUnitValueA(UnitNo, unit_valueA);
}

int RSNNSKrui::getUnitSubnetNo(int UnitNo) {
  return krui_getUnitSubnetNo(UnitNo);
}

void RSNNSKrui::setUnitSubnetNo(int UnitNo, int subnet_no) {
  krui_setUnitSubnetNo(UnitNo, subnet_no);
}

unsigned short RSNNSKrui::getUnitLayerNo(int UnitNo) {
  return krui_getUnitLayerNo(UnitNo);
}

void RSNNSKrui::setUnitLayerNo(int UnitNo, int layer_no) {
  krui_setUnitLayerNo(UnitNo, layer_no);
}

void RSNNSKrui::getUnitPosition(int UnitNo, struct PosType *position) {
  krui_getUnitPosition(UnitNo, position);
}

void RSNNSKrui::setUnitPosition(int UnitNo, struct PosType *position) {
  krui_setUnitPosition(UnitNo, position);
}

int RSNNSKrui::getUnitNoAtPosition(struct PosType *position,
                                              int subnet_no) {
  return krui_getUnitNoAtPosition(position, subnet_no);
}

int RSNNSKrui::getUnitNoNearPosition(struct PosType *position,
                                                int subnet_no,
                                                int range, int gridWidth) {
  return krui_getUnitNoNearPosition(position, subnet_no, range, gridWidth);
}

int RSNNSKrui::getUnitTType(int unit_no) {
  return krui_getUnitTType(unit_no);
}

krui_err RSNNSKrui::setUnitTType(int unit_no, int UnitTType) {
  return krui_setUnitTType(unit_no, UnitTType);
}

krui_err RSNNSKrui::freezeUnit(int unit_no) {
  return krui_freezeUnit(unit_no);
}

krui_err RSNNSKrui::unfreezeUnit(int unit_no) {
  return krui_unfreezeUnit(unit_no);
}

bool RSNNSKrui::isUnitFrozen(int unit_no) {
  return krui_isUnitFrozen(unit_no);
}

int RSNNSKrui::getUnitInputType(int unit_no) {
  return krui_getUnitInputType(unit_no);
}

int RSNNSKrui::createDefaultUnit(void) {
  return krui_createDefaultUnit();
}

int RSNNSKrui::createUnit(char *unit_name, char *out_func_name,
                               char *act_func_name, FlintTypeParam i_act,
                               FlintTypeParam bias) {
  return krui_createUnit(unit_name, out_func_name, act_func_name, i_act, bias);
}

krui_err RSNNSKrui::deleteUnit(int unit_no) {
  return krui_deleteUnit(unit_no);
}

krui_err RSNNSKrui::deleteUnitList(int no_of_units, int unit_list[]) {
  return krui_deleteUnitList(no_of_units, unit_list);
}

int RSNNSKrui::createFTypeUnit(char *Ftype_symbol) {
  return krui_createFTypeUnit(Ftype_symbol);
}

krui_err RSNNSKrui::setUnitFType(int unit_no, char *Ftype_symbol) {
  return krui_setUnitFType(unit_no, Ftype_symbol);
}

int RSNNSKrui::copyUnit(int unit_no, int copy_mode) {
  return krui_copyUnit(unit_no, copy_mode);
}

bool RSNNSKrui::setFirstFTypeEntry(void) {
  return krui_setFirstFTypeEntry();
}

bool RSNNSKrui::setNextFTypeEntry(void) {
  return krui_setNextFTypeEntry();
}

bool RSNNSKrui::setFTypeEntry(char *Ftype_symbol) {
  return krui_setFTypeEntry(Ftype_symbol);
}

char *RSNNSKrui::getFTypeName(void) {
  return krui_getFTypeName();
}

krui_err RSNNSKrui::setFTypeName(char *Ftype_symbol) {
  return krui_setFTypeName(Ftype_symbol);
}

char *RSNNSKrui::getFTypeActFuncName(void) {
  return krui_getFTypeActFuncName();
}

krui_err RSNNSKrui::setFTypeActFunc(char *act_func_name) {
  return krui_setFTypeActFunc(act_func_name);
}

krui_err RSNNSKrui::setFTypeOutFunc(char *out_func_name) {
  return krui_setFTypeOutFunc(out_func_name);
}

bool RSNNSKrui::setFirstFTypeSite(void) {
  return krui_setFirstFTypeSite();
}

bool RSNNSKrui::setNextFTypeSite(void) {
  return krui_setNextFTypeSite();
}

char *RSNNSKrui::getFTypeSiteName(void) {
  return krui_getFTypeSiteName();
}

krui_err RSNNSKrui::setFTypeSiteName(char *FType_site_name) {
  return krui_setFTypeSiteName(FType_site_name);
}

krui_err RSNNSKrui::createFTypeEntry(char *Ftype_symbol, char *act_func_name,
                                           char *out_func_name, int no_of_sites,
                                           char **array_of_site_names) {
  return krui_createFTypeEntry(Ftype_symbol, act_func_name,
                                           out_func_name, no_of_sites,
                                           array_of_site_names);
}

krui_err RSNNSKrui::deleteFTypeEntry(char *Ftype_symbol) {
  return krui_deleteFTypeEntry(Ftype_symbol);
}

int RSNNSKrui::getNoOfFunctions(void) {
  return krui_getNoOfFunctions();
}

void RSNNSKrui::getFuncInfo(int func_no, char **func_name,int *func_type) {
  krui_getFuncInfo(func_no, func_name, func_type);
}

bool RSNNSKrui::isFunction(char *func_name, int func_type) {
  return krui_isFunction(func_name, func_type);
}

bool RSNNSKrui::getFuncParamInfo(char *func_name, int func_type,
                                       int *no_of_input_params,
                                       int *no_of_output_params) {
  return krui_getFuncParamInfo(func_name, func_type,
                                       no_of_input_params,
                                       no_of_output_params);
}

bool RSNNSKrui::getFirstSiteTableEntry(char **site_name,char **site_func) {
  return krui_getFirstSiteTableEntry(site_name, site_func);
}

bool RSNNSKrui::getNextSiteTableEntry(char **site_name, char **site_func) {
  return krui_getNextSiteTableEntry(site_name, site_func);
}

char *RSNNSKrui::getSiteTableFuncName(char *site_name) {
  return krui_getSiteTableFuncName(site_name);
}

krui_err RSNNSKrui::createSiteTableEntry(char *site_name, char *site_func) {
  return krui_createSiteTableEntry(site_name, site_func);
}

krui_err RSNNSKrui::changeSiteTableEntry(char *old_site_name,
                                               char *new_site_name,
                                               char *new_site_func) {
  return krui_changeSiteTableEntry(old_site_name,
                                               new_site_name,
                                               new_site_func);
}

krui_err RSNNSKrui::deleteSiteTableEntry(char *site_name) {
  return krui_deleteSiteTableEntry(site_name);
}

bool RSNNSKrui::setFirstSite(void) {
  return krui_setFirstSite();
}

bool RSNNSKrui::setNextSite(void) {
  return krui_setNextSite();
}

krui_err RSNNSKrui::setSite(char *site_name) {
  return krui_setSite(site_name);
}

FlintType RSNNSKrui::getSiteValue(void) {
  return krui_getSiteValue();
}

char *RSNNSKrui::getSiteName(void) {
  return krui_getSiteName();
}

krui_err RSNNSKrui::setSiteName(char *site_name) {
  return krui_setSiteName(site_name);
}

char *RSNNSKrui::getSiteFuncName(void) {
  return krui_getSiteFuncName();
}

krui_err RSNNSKrui::addSite(char *site_name) {
  return krui_addSite(site_name);
}

bool RSNNSKrui::deleteSite(void) {
  return krui_deleteSite();
}

int RSNNSKrui::getFirstPredUnit(FlintType *strength) {
  return krui_getFirstPredUnit(strength);
}

int RSNNSKrui::getFirstPredUnitAndData(FlintType *strength,float *val_a,float *val_b, float *val_c) {
  return krui_getFirstPredUnitAndData(strength, val_a, val_b, val_c);
}

int RSNNSKrui::getNextPredUnit(FlintType *strength) {
  return krui_getNextPredUnit(strength);
}

int RSNNSKrui::getNextPredUnitAndData(FlintType *strength,float *val_a,float *val_b, float *val_c) {
  return krui_getNextPredUnitAndData(strength, val_a, val_b, val_c);
}

int RSNNSKrui::getCurrentPredUnit(FlintType *strength) {
  return krui_getCurrentPredUnit(strength);
}


int RSNNSKrui::getFirstSuccUnit(int source_unit_no, FlintType *weight) {
  return krui_getFirstSuccUnit(source_unit_no, weight);
}

int RSNNSKrui::getNextSuccUnit(FlintType *weight) {
  return krui_getNextSuccUnit(weight);
}

bool RSNNSKrui::areConnected(int source_unit_no, int target_unit_no) {
  return krui_areConnected(source_unit_no, target_unit_no);
}

bool RSNNSKrui::areConnectedWeight(int source_unit_no,int target_unit_no,
                                             FlintType *weight) {
  return krui_areConnectedWeight(source_unit_no, target_unit_no,
                                             weight);
}

bool RSNNSKrui::isConnected(int source_unit_no) {
  return krui_isConnected(source_unit_no);
}

FlintType RSNNSKrui::getLinkWeight(void) {
  return krui_getLinkWeight();
}

void RSNNSKrui::setLinkWeight(FlintTypeParam weight) {
  krui_setLinkWeight(weight);
}

krui_err RSNNSKrui::createLink(int source_unit_no, FlintTypeParam weight) {
  return krui_createLink(source_unit_no, weight);
}

struct Link* RSNNSKrui::createLinkWithAdditionalParameters(
                            int source_unit_no, FlintTypeParam weight,
                            float val_a,float val_b,float val_c) {
  return krui_createLinkWithAdditionalParameters(
                            source_unit_no, weight,
                            val_a, val_b, val_c);
}

krui_err RSNNSKrui::deleteLink(void) {
  return krui_deleteLink();
}

krui_err RSNNSKrui::deleteAllInputLinks(void) {
  return krui_deleteAllInputLinks();
}

krui_err RSNNSKrui::deleteAllOutputLinks(void) {
  return krui_deleteAllOutputLinks();
}


void RSNNSKrui::jogWeights(FlintTypeParam minus, FlintTypeParam plus) {
  krui_jogWeights(minus, plus);
}

krui_err RSNNSKrui::jogCorrWeights(FlintTypeParam minus, FlintTypeParam plus,
                                         FlintTypeParam mincorr) {
  return krui_jogCorrWeights(minus, plus,
                                         mincorr);
}

krui_err RSNNSKrui::updateSingleUnit(int unit_no) {
  return krui_updateSingleUnit(unit_no);
}

char *RSNNSKrui::getUpdateFunc(void) {
  return krui_getUpdateFunc();
}

krui_err RSNNSKrui::setUpdateFunc(char *update_func) {
  return krui_setUpdateFunc(update_func);
}

krui_err RSNNSKrui::setRemapFunc(char *name, float *params) {
  return krui_setRemapFunc(name, params);
}

krui_err RSNNSKrui::updateNet(float *parameterInArray, int NoOfInParams) {
  krui_err err = krui_updateNet(parameterInArray, NoOfInParams);
  //if (err) Error("updateNet", "%s", error(err));
  return err;
}

char *RSNNSKrui::getInitialisationFunc(void) {
  return krui_getInitialisationFunc();
}

krui_err RSNNSKrui::setInitialisationFunc(char *initialisation_func) {
  return krui_setInitialisationFunc(initialisation_func);
}

krui_err RSNNSKrui::initializeNet(float *parameterInArray, int NoOfInParams) {
  krui_err err = krui_initializeNet(parameterInArray, NoOfInParams);
  //if (err) Error("initializeNet", "%s", error(err));
  return err;
}

char *RSNNSKrui::getLearnFunc(void) {
  return krui_getLearnFunc();
}

krui_err RSNNSKrui::setLearnFunc(char *learning_func) {
  krui_err err = krui_setLearnFunc(learning_func);
  //if (err) Error("setLearnFunc", "%s", error(err));
  return err;
}

krui_err RSNNSKrui::trainNetwork(NetLearnParameters *parameters) {
  return krui_trainNetwork(parameters);
}

krui_err RSNNSKrui::getNetworkErrorArray(double **learnErrors,int **atEpoch,
                                               int *noOfErrors) {
  return krui_getNetworkErrorArray(learnErrors, atEpoch,
                                               noOfErrors);
}

krui_err RSNNSKrui::stopTraining(void) {
  return krui_stopTraining();
}

/*
krui_err RSNNSKrui::learnAllPatterns(float *parameterInArray,int NoOfInParams,
                                           float **parameterOutArray,
                                           int *NoOfOutParams) {
  krui_err err = krui_learnAllPatterns(parameterInArray, NoOfInParams,
                                           parameterOutArray,
                                           NoOfOutParams);
  //if (err) Error("learnAllPatterns", "%s", error(err));
  return err;
}
*/


krui_err RSNNSKrui::learnAllPatterns(float decay, float *learnAllPatternsError)
{
  float *inParams = &decay;
  int numParams = 1;
  float *outParams;
  int NoOfOutParams;

  int res = krui_learnAllPatterns(inParams, numParams, &outParams, &NoOfOutParams);
  
  *learnAllPatternsError = outParams[0];
  
  return res;
  
  //float error;
  //int res = krui_learnAllPatterns(&decay, num_params, &learnAllPatterns_error, NoOfOutParams);

  //int res = krui_learnAllPatterns(&inParams, numParams, &outParams, &noOutParams);

  //error = outParams[0];
//Rprintf("error: %f\n",error);  
  //&error;
//  *NoOfOutParams = noOutParams;
//Rprintf("NoOfOutParams: %i\n",noOutParams);    
  
}




krui_err RSNNSKrui::testAllPatterns(float *parameterInArray, int NoOfInParams,
                                          float **parameterOutArray,
                                          int *NoOfOutParams) {
  krui_err err = krui_testAllPatterns(parameterInArray, NoOfInParams,
                                          parameterOutArray,
                                          NoOfOutParams);
  //if (err) Error("testAllPatterns", "%s", error(err));
  return err;
}

krui_err RSNNSKrui::learnSinglePattern(int pattern_no,float *parameterInArray,
                                             int NoOfInParams,
                                             float **parameterOutArray,
                                             int *NoOfOutParams) {
  return krui_learnSinglePattern(pattern_no, parameterInArray,
                                             NoOfInParams,
                                             parameterOutArray,
                                             NoOfOutParams);
}

krui_err RSNNSKrui::testSinglePattern(int pattern_no, float *parameterInArray,
                                            int NoOfInParams,
                                            float **parameterOutArray,
                                            int *NoOfOutParams) {
  krui_err err = krui_testSinglePattern(pattern_no, parameterInArray,
                                            NoOfInParams,
                                            parameterOutArray,
                                            NoOfOutParams);
  //if (err) Error("testAllPatterns", "%s", error(err));
  return err;
}

int RSNNSKrui::checkPruning (void) {
  return krui_checkPruning ();
}

krui_err RSNNSKrui::learnAllPatternsFF(float *parameterInArray,
                                             int NoOfInParams,
                                             float **parameterOutArray,
                                             int *NoOfOutParams) {
  krui_err err = krui_learnAllPatternsFF(parameterInArray,
                                             NoOfInParams,
                                             parameterOutArray,
                                             NoOfOutParams);
  //if (err) Error("learnAllPatternsFF", "%s", error(err));
  return err;
}

krui_err RSNNSKrui::learnSinglePatternFF(int pattern_no,
                                               float *parameterInArray,
                                               int NoOfInParams,
                                               float **parameterOutArray,
                                               int *NoOfOutParams) {
  return krui_learnSinglePatternFF(pattern_no,
                                               parameterInArray,
                                               NoOfInParams,
                                               parameterOutArray,
                                               NoOfOutParams);
}

krui_err RSNNSKrui::setClassDistribution(unsigned int *classDist) {
  return krui_setClassDistribution(classDist);
}

krui_err RSNNSKrui::setClassInfo(char *name) {
  return krui_setClassInfo(name);
}

krui_err RSNNSKrui::useClassDistribution(bool use_it) {
  return krui_useClassDistribution(use_it);
}

char *RSNNSKrui::getPrunFunc (void) {
  return krui_getPrunFunc ();
}

char *RSNNSKrui::getFFLearnFunc (void) {
  return krui_getFFLearnFunc ();
}

krui_err RSNNSKrui::setFFLearnFunc (char *FF_learning_func) {
  return krui_setFFLearnFunc (FF_learning_func);
}

krui_err RSNNSKrui::setPrunFunc (char *pruning_func) {
  return krui_setPrunFunc (pruning_func);
}

krui_err RSNNSKrui::showPattern(int mode) {
  krui_err err = krui_showPattern(mode);
  //if (err) Error("showPattern", "%s", error(err));
  return err;
}

krui_err RSNNSKrui::allocNewPatternSet(int *set_no) {
  krui_err err = krui_allocNewPatternSet(set_no);
  //if (err) Error("allocNewPatternSet", "%s", error(err));
  return err;
}

krui_err RSNNSKrui::newPattern(void) {
  krui_err err = krui_newPattern();
  //if (err) Error("newPattern", "%s", error(err));
  return err;
}

krui_err RSNNSKrui::setPatternNo(int pattern_no) {
  krui_err err = krui_setPatternNo(pattern_no);
  //if (err) Error("setPatternNo", "%s", error(err));
  return err;
}

krui_err RSNNSKrui::getPatternNo(void) {
  krui_err err = krui_getPatternNo();
  //if (err) Error("getPatternNo", "%s", error(err));
  return err;
}

krui_err RSNNSKrui::deletePattern(void) {
  return krui_deletePattern();
}

krui_err RSNNSKrui::modifyPattern(void) {
  return krui_modifyPattern();
}

void RSNNSKrui::deleteAllPatterns(void) {
  krui_deleteAllPatterns();
}

krui_err RSNNSKrui::shufflePatterns(bool on_or_off) {
  krui_err err = krui_shufflePatterns(on_or_off);
  //if (err) Error("shufflePatterns", "%s", error(err));
  return err;
}

krui_err RSNNSKrui::shuffleSubPatterns(bool on_or_off) {
  return krui_shuffleSubPatterns(on_or_off);
}

int RSNNSKrui::getNoOfPatterns(void) {
  return krui_getNoOfPatterns();
}

int RSNNSKrui::getTotalNoOfSubPatterns(void) {
  return krui_getTotalNoOfSubPatterns();
}

krui_err RSNNSKrui::loadNewPatterns(char *filename, int *number) {
  krui_err err = krui_loadNewPatterns(filename, number);
  //if (err) Error("loadNewPatterns", "%s", error(err));
  return err;
}

krui_err RSNNSKrui::setCurrPatSet(int number) {
  krui_err err = krui_setCurrPatSet(number);
  //if (err) Error("setCurrPatSet", "%s", error(err));
  return err;
}

krui_err RSNNSKrui::saveNewPatterns(char *filename, int number) {
  krui_err err = krui_saveNewPatterns(filename, number);
  //if (err) Error("saveNewPatterns", "%s", error(err));
  return err;
}

krui_err RSNNSKrui::deletePatSet(int number) {
  krui_err err = krui_deletePatSet(number);
  //if (err) Error("deletePatSet", "%s", error(err));
  return err;
}

krui_err RSNNSKrui::GetPatInfo(pattern_set_info *set_info,
                                     pattern_descriptor *pat_info) {
  return krui_GetPatInfo(set_info,
                                   pat_info);
}

krui_err RSNNSKrui::DefShowSubPat(int *insize, int *outsize,
                                        int *inpos, int *outpos) {
  return krui_DefShowSubPat(insize, outsize,
                                       inpos, outpos);
}

krui_err RSNNSKrui::DefTrainSubPat(int *insize, int *outsize,
                                         int *instep, int *outstep,
                                         int *max_n_pos) {

  *insize=0;
  *outsize=0;
  *instep=0;
  *outstep=0;
  *max_n_pos=0;

//  int tmp_insize=0, tmp_outsize=0, tmp_instep=0, tmp_outstep=0, tmp_max_n_pos=0;
//  krui_err err = krui_DefTrainSubPat(&tmp_insize, &tmp_outsize, &tmp_instep, &tmp_outstep, &tmp_max_n_pos);

  krui_err err = krui_DefTrainSubPat(insize, outsize, instep, outstep, max_n_pos);

/*
  Rprintf("\ninsize: %i\n", tmp_insize); 
  Rprintf("\noutsize: %i\n", tmp_outsize); 
  Rprintf("\ninstep: %i\n", tmp_instep); 
  Rprintf("\noutstep: %i\n", tmp_outstep); 
  Rprintf("\nmax_n_pos: %i\n", tmp_max_n_pos); 
*/

  //if (err) Error("DefTrainSubPat", "%s", error(err));
  return err;
}

krui_err RSNNSKrui::AlignSubPat(int *inpos, int *outpos, int *no) {
  return krui_AlignSubPat(inpos, outpos, no);
}

krui_err RSNNSKrui::GetShapeOfSubPattern(int *insize, int *outsize,
                                               int *inpos, int *outpos, int n_pos) {
  return krui_GetShapeOfSubPattern(insize, outsize,
                                           inpos, outpos, n_pos);
}

krui_err RSNNSKrui::saveNet(char *filename, char *netname) {
  krui_err err = krui_saveNet(filename, netname);
  //if (err) Error("saveNet", "%s", error(err));
  return err;
}

krui_err RSNNSKrui::loadNet(char *filename, char **netname) {
  krui_err err = krui_loadNet(filename, netname);
  //if (err) Error("loadNet", "%s", error(err));
  return err;
}

krui_err RSNNSKrui::saveResultParam(char *filename, bool create,
                                          int startpattern, int endpattern,
                                          bool includeinput, bool includeoutput,
                                          float *Update_param_array,
                                          int NoOfUpdateParam) {
  krui_err err = krui_saveResultParam(filename, create,
                                          startpattern, endpattern,
                                          includeinput, includeoutput,
                                          Update_param_array,
                                          NoOfUpdateParam);
  //if (err) Error("saveResultParam", "%s", error(err));
  return err;
}

krui_err RSNNSKrui::allocateUnits(int no_of_units) {
  return krui_allocateUnits(no_of_units);
}

void RSNNSKrui::deleteNet(void) {
  krui_deleteNet();
}

bool RSNNSKrui::getFirstSymbolTableEntry(char **symbol_name,
                                                   int *symbol_type) {
  return krui_getFirstSymbolTableEntry(symbol_name,
                                                   symbol_type);
}

bool RSNNSKrui::getNextSymbolTableEntry(char **symbol_name,
                                                  int *symbol_type) {
  return krui_getNextSymbolTableEntry(symbol_name,
                                                  symbol_type);
}

bool RSNNSKrui::symbolSearch(char *symbol, int symbol_type) {
  return krui_symbolSearch(symbol, symbol_type);
}

char *RSNNSKrui::getVersion(void) {
  return krui_getVersion();
}

void RSNNSKrui::getNetInfo(int *no_of_sites, int *no_of_links,
                                     int *no_of_STable_entries,
                                     int *no_of_FTable_entries) {
  krui_getNetInfo(no_of_sites, no_of_links,
                                     no_of_STable_entries,
                                     no_of_FTable_entries);
}

void RSNNSKrui::getMemoryManagerInfo(int *unit_bytes,
                            int *site_bytes, int *link_bytes,
                            int *NTable_bytes, int *STable_bytes,
                            int *FTable_bytes) {
  krui_getMemoryManagerInfo(unit_bytes,
                            site_bytes, link_bytes,
                            NTable_bytes, STable_bytes,
                            FTable_bytes);
}

void RSNNSKrui::getUnitDefaults(FlintType *act, FlintType *bias, int *st,
                            int *subnet_no, int *layer_no, char **act_func,
                            char **out_func) {
  krui_getUnitDefaults(act, bias, st,
                            subnet_no, layer_no, act_func,
                            out_func);
}

krui_err RSNNSKrui::setUnitDefaults(FlintTypeParam act,
                            FlintTypeParam bias, int st, int subnet_no,
                            int layer_no, char *act_func, char *out_func) {
  return krui_setUnitDefaults(act,
                            bias, st, subnet_no,
                            layer_no, act_func, out_func);
}

void RSNNSKrui::resetNet(void) {
  krui_resetNet();
}

void RSNNSKrui::setSeedNo(long int seed) {
  krui_setSeedNo(seed);
}

int RSNNSKrui::getNoOfInputUnits(void) {
  return krui_getNoOfInputUnits();
}

int RSNNSKrui::getNoOfOutputUnits(void) {
  return krui_getNoOfOutputUnits();
}

int RSNNSKrui::getNoOfTTypeUnits(int UnitTType) {
  return krui_getNoOfTTypeUnits(UnitTType);
}

int RSNNSKrui::getNoOfSpecialInputUnits(void) {
  return krui_getNoOfSpecialInputUnits();
}

int RSNNSKrui::getNoOfSpecialOutputUnits(void) {
  return krui_getNoOfSpecialOutputUnits();
}

krui_err RSNNSKrui::xyTransTable(int op, int *x, int *y, int z) {
  return krui_xyTransTable(op, x, y, z);
}

krui_err RSNNSKrui::getUnitCenters(int unit_no, int center_no,
                            struct PositionVector **unit_center) {
  return krui_getUnitCenters(unit_no, center_no,
                            unit_center);
}

krui_err RSNNSKrui::setUnitCenters(int unit_no, int center_no,
                            struct PositionVector *unit_center) {
  return krui_setUnitCenters(unit_no, center_no,
                            unit_center);
}

//char *RSNNSKrui::error(int error_code) {
//  return krui_error(error_code);
//}

float RSNNSKrui::NA_Error(int currentPattern, int error_unit,
                                       int error, bool ave) {
  return krui_NA_Error(currentPattern, error_unit,
                                       error, ave);
}

float RSNNSKrui::getVariance (void) {
  return krui_getVariance ();
}

int RSNNSKrui::countLinks(void) {
  return krui_countLinks();
}


#ifdef MASPAR_KERNEL

krui_err RSNNSKrui::MasPar( mode ) {
  return krui_MasPar( mode );
}

krui_err RSNNSKrui::getMasParStatus(void) {
  return krui_getMasParStatus();
}

krui_err RSNNSKrui::MasParBenchmark( func_type, cycles, result ) {
  return krui_MasParBenchmark(func_type, cycles, result );
}


#endif

krui_err RSNNSKrui::setSpecialNetworkType(int net_type) {
  return krui_setSpecialNetworkType(net_type);
}

int RSNNSKrui::getSpecialNetworkType(void) {
  return krui_getSpecialNetworkType();
}

int RSNNSKrui::initInversion(void) {
  return krui_initInversion();
}

void RSNNSKrui::inv_forwardPass(struct UnitList *inputs) {
  krui_inv_forwardPass(inputs);
}

double RSNNSKrui::inv_backwardPass(float learn, float delta_max,
                                           int *err_units, float ratio,
                                           struct UnitList *inputs,
                                           struct UnitList *outputs) {
  return krui_inv_backwardPass(learn, delta_max,
                                           err_units, ratio,
                                           inputs,
                                           outputs);
}

void RSNNSKrui::kohonen_SetExtraParameter(int x) {
  krui_kohonen_SetExtraParameter(x);
}

void RSNNSKrui::spanning_tree(void) {
  krui_spanning_tree();
}

void RSNNSKrui::cc_updatePosOfSpecialUnits(void) {
  krui_cc_updatePosOfSpecialUnits();
}

krui_err RSNNSKrui::cc_deleteAllSpecialUnits(void) {
  return krui_cc_deleteAllSpecialUnits();
}

int RSNNSKrui::getErrorCode(void) {
  return krui_getErrorCode();
}

krui_err RSNNSKrui::setErrorHandler(void(* error_Handler )(int)) {
  return krui_setErrorHandler(error_Handler);
}

void RSNNSKrui::execHandler(int error_code) {
  krui_execHandler(error_code);
}

